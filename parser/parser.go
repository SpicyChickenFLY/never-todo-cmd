// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
)

type yySymType struct {
	yys int
	str string
	num int
	cmd *CommandTree
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57373
	yyEofCode = 57344
	ADD       = 57362
	AGE       = 57366
	AND       = 57352
	COLON     = 57350
	DELETE    = 57363
	DONE      = 57365
	DQUOTE    = 57372
	DUE       = 57367
	EXPLAIN   = 57357
	GUI       = 57356
	HELP      = 57370
	IDENT     = 57347
	LIKE      = 57368
	LOG       = 57358
	LOOP      = 57369
	MINUS     = 57349
	NOT       = 57351
	NUM       = 57346
	OR        = 57353
	PLUS      = 57348
	QUOTE     = 57371
	SET       = 57364
	TAG       = 57361
	TASK      = 57360
	UI        = 57355
	UNDO      = 57359
	XOR       = 57354
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -113
)

var (
	yyPrec = map[int]int{
		AND:   0,
		OR:    0,
		XOR:   1,
		PLUS:  2,
		MINUS: 2,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (189x)
		57370: 1,  // HELP (167x)
		57367: 2,  // DUE (129x)
		57369: 3,  // LOOP (129x)
		57348: 4,  // PLUS (129x)
		57349: 5,  // MINUS (123x)
		57346: 6,  // NUM (122x)
		57347: 7,  // IDENT (121x)
		57350: 8,  // COLON (119x)
		57368: 9,  // LIKE (118x)
		57372: 10, // DQUOTE (116x)
		57371: 11, // QUOTE (116x)
		57364: 12, // SET (116x)
		57362: 13, // ADD (115x)
		57366: 14, // AGE (115x)
		57352: 15, // AND (115x)
		57363: 16, // DELETE (115x)
		57365: 17, // DONE (115x)
		57351: 18, // NOT (115x)
		57353: 19, // OR (115x)
		57354: 20, // XOR (115x)
		57381: 21, // id (74x)
		57382: 22, // id_group (71x)
		57386: 23, // shard_content (66x)
		57378: 24, // content (26x)
		57375: 25, // assign_tag (23x)
		57374: 26, // assign_group (18x)
		57403: 27, // unassign_tag (18x)
		57379: 28, // content_group (11x)
		57380: 29, // content_logic (11x)
		57397: 30, // task_list_filter (9x)
		57399: 31, // task_update_filter (7x)
		57385: 32, // positive_assign_group (5x)
		57402: 33, // time_single (5x)
		57392: 34, // task_add_filter (4x)
		57389: 35, // tag_list_filter (3x)
		57384: 36, // loop_time (2x)
		57361: 37, // TAG (2x)
		57400: 38, // time_list_filter (2x)
		57401: 39, // time_range (2x)
		57376: 40, // command (1x)
		57377: 41, // command_stmt (1x)
		57357: 42, // EXPLAIN (1x)
		57356: 43, // GUI (1x)
		57358: 44, // LOG (1x)
		57383: 45, // log_list (1x)
		57387: 46, // tag_help (1x)
		57388: 47, // tag_list (1x)
		57390: 48, // tag_set (1x)
		57360: 49, // TASK (1x)
		57391: 50, // task_add (1x)
		57393: 51, // task_delete (1x)
		57394: 52, // task_done (1x)
		57395: 53, // task_help (1x)
		57396: 54, // task_list (1x)
		57398: 55, // task_set (1x)
		57355: 56, // UI (1x)
		57359: 57, // UNDO (1x)
		57404: 58, // undo_log (1x)
		57373: 59, // $default (0x)
		57345: 60, // error (0x)
	}

	yySymNames = []string{
		"$end",
		"HELP",
		"DUE",
		"LOOP",
		"PLUS",
		"MINUS",
		"NUM",
		"IDENT",
		"COLON",
		"LIKE",
		"DQUOTE",
		"QUOTE",
		"SET",
		"ADD",
		"AGE",
		"AND",
		"DELETE",
		"DONE",
		"NOT",
		"OR",
		"XOR",
		"id",
		"id_group",
		"shard_content",
		"content",
		"assign_tag",
		"assign_group",
		"unassign_tag",
		"content_group",
		"content_logic",
		"task_list_filter",
		"task_update_filter",
		"positive_assign_group",
		"time_single",
		"task_add_filter",
		"tag_list_filter",
		"loop_time",
		"TAG",
		"time_list_filter",
		"time_range",
		"command",
		"command_stmt",
		"EXPLAIN",
		"GUI",
		"LOG",
		"log_list",
		"tag_help",
		"tag_list",
		"tag_set",
		"TASK",
		"task_add",
		"task_delete",
		"task_done",
		"task_help",
		"task_list",
		"task_set",
		"UI",
		"UNDO",
		"undo_log",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {40, 1},
		2:   {41, 0},
		3:   {41, 1},
		4:   {41, 1},
		5:   {41, 1},
		6:   {41, 1},
		7:   {41, 1},
		8:   {41, 1},
		9:   {41, 1},
		10:  {41, 1},
		11:  {41, 1},
		12:  {41, 1},
		13:  {41, 1},
		14:  {41, 1},
		15:  {41, 1},
		16:  {41, 1},
		17:  {41, 1},
		18:  {45, 1},
		19:  {45, 2},
		20:  {58, 1},
		21:  {58, 2},
		22:  {53, 2},
		23:  {53, 2},
		24:  {53, 2},
		25:  {53, 2},
		26:  {53, 2},
		27:  {54, 2},
		28:  {54, 1},
		29:  {50, 4},
		30:  {50, 3},
		31:  {50, 3},
		32:  {52, 3},
		33:  {52, 2},
		34:  {52, 2},
		35:  {51, 3},
		36:  {51, 2},
		37:  {51, 2},
		38:  {55, 5},
		39:  {55, 4},
		40:  {55, 5},
		41:  {55, 4},
		42:  {55, 4},
		43:  {55, 3},
		44:  {46, 3},
		45:  {46, 2},
		46:  {46, 2},
		47:  {47, 2},
		48:  {48, 4},
		49:  {30, 0},
		50:  {30, 2},
		51:  {30, 3},
		52:  {30, 2},
		53:  {30, 2},
		54:  {30, 4},
		55:  {30, 4},
		56:  {34, 0},
		57:  {34, 2},
		58:  {34, 3},
		59:  {34, 3},
		60:  {31, 0},
		61:  {31, 2},
		62:  {31, 3},
		63:  {31, 3},
		64:  {35, 0},
		65:  {35, 2},
		66:  {35, 3},
		67:  {22, 2},
		68:  {22, 3},
		69:  {22, 1},
		70:  {21, 1},
		71:  {28, 1},
		72:  {28, 1},
		73:  {29, 3},
		74:  {29, 3},
		75:  {29, 3},
		76:  {29, 2},
		77:  {26, 2},
		78:  {26, 2},
		79:  {26, 0},
		80:  {32, 2},
		81:  {32, 0},
		82:  {25, 2},
		83:  {27, 2},
		84:  {24, 3},
		85:  {24, 3},
		86:  {24, 3},
		87:  {24, 3},
		88:  {24, 1},
		89:  {23, 0},
		90:  {23, 2},
		91:  {23, 2},
		92:  {23, 2},
		93:  {23, 2},
		94:  {23, 2},
		95:  {23, 2},
		96:  {23, 2},
		97:  {23, 2},
		98:  {23, 2},
		99:  {23, 2},
		100: {23, 2},
		101: {23, 2},
		102: {23, 2},
		103: {23, 2},
		104: {23, 2},
		105: {23, 2},
		106: {23, 2},
		107: {38, 1},
		108: {38, 1},
		109: {33, 1},
		110: {33, 0},
		111: {39, 3},
		112: {36, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [206][]uint16{
		// 0
		{111, 116, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 140, 135, 146, 161, 139, 137, 150, 162, 163, 141, 138, 157, 136, 151, 145, 152, 144, 149, 134, 37: 142, 40: 114, 115, 119, 118, 131, 120, 128, 129, 130, 133, 124, 125, 127, 122, 123, 126, 117, 132, 121},
		{113},
		{112},
		{110, 37: 317},
		{109},
		// 5
		{108},
		{107},
		{106},
		{105},
		{104},
		// 10
		{103, 316},
		{102, 315},
		{101, 314},
		{100, 313},
		{99},
		// 15
		{98},
		{97, 312},
		{96, 311},
		{95, 6: 310},
		{93, 6: 148, 21: 309},
		// 20
		{64, 290, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 295, 292, 146, 161, 294, 293, 150, 162, 163, 296, 222, 157, 224, 151, 145, 152, 144, 149, 291},
		{85, 85},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 288, 287},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 275, 41, 225, 41, 41, 41, 226, 227},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 274, 183},
		// 25
		{64, 64, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 168, 166, 146, 161, 273, 272, 150, 162, 163, 164, 222, 232, 224, 151, 145, 152, 144, 149, 231},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 271, 185},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 268, 165, 184},
		{44, 44, 171, 159, 173, 253, 148, 158, 160, 172, 155, 156, 250, 166, 170, 161, 167, 169, 176, 162, 163, 164, 252, 157, 251},
		{49, 49, 6: 148, 9: 244, 12: 242, 21: 164, 243, 35: 241},
		// 30
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 150, 162, 163, 164, 165, 239, 224, 28: 238, 149},
		{64, 64, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 168, 166, 146, 161, 167, 169, 150, 162, 163, 164, 222, 157, 224, 151, 145, 152, 144, 149, 237},
		{64, 64, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 168, 166, 146, 161, 167, 169, 150, 162, 163, 164, 222, 157, 224, 151, 145, 152, 144, 149, 236},
		{24, 24, 171, 159, 173, 174, 148, 158, 233, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 182},
		{24, 24, 171, 159, 173, 174, 148, 158, 214, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 181},
		// 35
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 213, 212},
		{34, 34, 34, 34, 207, 208, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 25: 151, 211, 152},
		{34, 34, 34, 34, 207, 208, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 25: 151, 206, 152},
		// 40
		{24, 24, 171, 159, 173, 174, 148, 205, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 179},
		{24, 24, 171, 159, 173, 174, 148, 204, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 178},
		{2: 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 200, 201},
		{2: 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 196, 197},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		// 45
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 195},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 194},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 193},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 192},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 191},
		// 50
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 175},
		{44, 44, 44, 44, 44, 189, 148, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 164, 188},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 187},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 186},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 185},
		// 55
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 184},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 183},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 182},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 181},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 180},
		// 60
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 179},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 178},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 177},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		// 65
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		// 70
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		// 75
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{6: 148, 21: 190},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		// 80
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{11: 199},
		{11: 198},
		// 85
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{10: 203},
		{10: 202},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		// 90
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{30, 30, 171, 159, 173, 174, 148, 158, 160, 172, 30, 30, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 195},
		{31, 31, 171, 159, 173, 174, 148, 158, 160, 172, 31, 31, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 195},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{7: 210},
		// 95
		{7: 209},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 100
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 171, 159, 173, 174, 148, 216, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 193, 33: 217, 38: 215, 218},
		{64, 64, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 168, 166, 146, 161, 167, 169, 150, 162, 163, 164, 222, 157, 224, 151, 145, 152, 144, 149, 223},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 195},
		{6, 6, 6, 6, 6, 219, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 105
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{3, 3, 3, 3, 3, 3, 3, 220, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 33: 221},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{64, 64, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 168, 166, 146, 161, 167, 169, 150, 162, 163, 164, 222, 232, 224, 151, 145, 152, 144, 149, 231},
		// 110
		{58, 58},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 225, 41, 41, 41, 226, 227},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 157, 230},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 157, 229},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 157, 228},
		// 115
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{63, 63},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		// 120
		{24, 24, 171, 159, 173, 174, 148, 216, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 193, 33: 217, 38: 234, 218},
		{64, 64, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 168, 166, 146, 161, 167, 169, 150, 162, 163, 164, 222, 157, 224, 151, 145, 152, 144, 149, 235},
		{59, 59},
		{60, 60},
		{61, 61},
		// 125
		{64, 64, 147, 159, 153, 154, 148, 158, 160, 143, 155, 156, 168, 166, 146, 161, 167, 169, 150, 162, 163, 164, 222, 157, 224, 151, 145, 152, 144, 149, 240},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{62, 62},
		{66, 66},
		{6: 148, 21: 248},
		// 130
		{49, 49, 6: 148, 9: 244, 21: 164, 243, 35: 247},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 150, 162, 163, 164, 165, 157, 224, 28: 245, 149},
		{49, 49, 6: 148, 9: 244, 21: 164, 243, 35: 246},
		{47, 47},
		{48, 48},
		// 135
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 157, 249},
		{65, 65},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 266, 265},
		{53, 53, 257, 258, 207, 208, 25: 151, 256, 152, 31: 255},
		{46, 46, 171, 159, 173, 174, 148, 158, 160, 172, 46, 46, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 187},
		// 140
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 12: 168, 166, 170, 161, 167, 169, 176, 162, 163, 254, 165, 178},
		{45, 45, 45, 45, 45, 189, 148, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 164, 188},
		{70, 70},
		{53, 53, 257, 258, 207, 208, 25: 151, 256, 152, 31: 264},
		{8: 262},
		// 145
		{8: 259},
		{7: 261, 36: 260},
		{50, 50},
		{1, 1},
		{3, 3, 7: 220, 33: 263},
		// 150
		{51, 51},
		{52, 52},
		{53, 53, 257, 258, 207, 208, 25: 151, 256, 152, 31: 267},
		{25, 25, 25, 25, 25, 25},
		{72, 72},
		// 155
		{44, 44, 171, 159, 173, 253, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 252, 157, 269},
		{53, 53, 257, 258, 207, 208, 25: 151, 256, 152, 31: 270},
		{74, 74},
		{77, 77, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 187},
		{79, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 183},
		// 160
		{76, 76, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 185},
		{80, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 187},
		{57, 57, 278, 279, 207, 25: 280, 32: 277, 34: 276},
		{82, 82},
		{57, 57, 278, 279, 207, 25: 280, 32: 277, 34: 286},
		// 165
		{8: 284},
		{8: 282},
		{32, 32, 32, 32, 207, 25: 280, 32: 281},
		{33, 33, 33, 33, 33},
		{7: 261, 36: 283},
		// 170
		{54, 54},
		{3, 3, 7: 220, 33: 285},
		{55, 55},
		{56, 56},
		{57, 57, 278, 279, 207, 25: 280, 32: 277, 34: 289},
		// 175
		{25, 25, 25, 25, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{83, 83},
		{91},
		{86, 86},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 288, 307},
		// 180
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 306, 183},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 305, 185},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 302, 165, 184},
		{44, 44, 171, 159, 173, 253, 148, 158, 160, 172, 155, 156, 297, 166, 170, 161, 167, 169, 176, 162, 163, 164, 252, 157, 298},
		{24, 24, 171, 159, 173, 174, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 266, 300},
		// 185
		{53, 53, 257, 258, 207, 208, 25: 151, 256, 152, 31: 299},
		{71, 71},
		{53, 53, 257, 258, 207, 208, 25: 151, 256, 152, 31: 301},
		{73, 73},
		{44, 44, 171, 159, 173, 253, 148, 158, 160, 172, 155, 156, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 252, 157, 303},
		// 190
		{53, 53, 257, 258, 207, 208, 25: 151, 256, 152, 31: 304},
		{75, 75},
		{78, 78, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 187},
		{81, 24, 171, 159, 173, 174, 148, 158, 160, 172, 24, 24, 168, 166, 170, 161, 167, 169, 176, 162, 163, 164, 165, 187},
		{57, 57, 278, 279, 207, 25: 280, 32: 277, 34: 308},
		// 195
		{84, 84},
		{92},
		{94},
		{67},
		{68},
		// 200
		{87},
		{88},
		{89},
		{90},
		{1: 318},
		// 205
		{69},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 60

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{ /*fmt.Println("command")*/
		}
	case 2:
		{
			fmt.Println("command_stmt-summary")
		}
	case 3:
		{
			fmt.Println("command_stmt-HELP")
		}
	case 4:
		{
			fmt.Println("command_stmt-UI")
		}
	case 5:
		{
			fmt.Println("command_stmt-GUI")
		}
	case 6:
		{
			fmt.Println("command_stmt-EXPLAIN")
		}
	case 7:
		{
			fmt.Println("command_stmt-log_list")
		}
	case 8:
		{
			fmt.Println("command_stmt-undo_log")
		}
	case 9:
		{
			fmt.Println("command_stmt-task_help")
		}
	case 10:
		{
			fmt.Println("command_stmt-task_list")
		}
	case 11:
		{
			fmt.Println("command_stmt-task_add")
		}
	case 12:
		{
			fmt.Println("command_stmt-task_delete")
		}
	case 13:
		{
			fmt.Println("command_stmt-task_set")
		}
	case 14:
		{
			fmt.Println("command_stmt-task_done")
		}
	case 15:
		{
			fmt.Println("command_stmt-tag_help")
		}
	case 16:
		{
			fmt.Println("command_stmt-tag_list")
		}
	case 17:
		{
			fmt.Println("command_stmt-tag_set")
		}
	case 18:
		{ /*fmt.Println("log")*/
		}
	case 19:
		{ /*fmt.Println("log")*/
		}
	case 20:
		{ /*fmt.Println("log")*/
		}
	case 21:
		{ /*fmt.Println("log")*/
		}
	case 22:
		{ /*fmt.Println("task_help")*/
		}
	case 23:
		{ /*fmt.Println("task_help")*/
		}
	case 24:
		{ /*fmt.Println("task_help")*/
		}
	case 25:
		{ /*fmt.Println("task_help")*/
		}
	case 26:
		{ /*fmt.Println("task_help")*/
		}
	case 27:
		{ /*fmt.Println("task_list")*/
		}
	case 28:
		{ /*fmt.Println("task_list")*/
		}
	case 29:
		{ /*fmt.Println("task_add")*/
		}
	case 30:
		{ /*fmt.Println("task_add")*/
		}
	case 31:
		{ /*fmt.Println("task_add")*/
		}
	case 32:
		{ /*fmt.Println("task_done")*/
		}
	case 33:
		{ /*fmt.Println("task_done")*/
		}
	case 34:
		{ /*fmt.Println("task_done")*/
		}
	case 35:
		{ /*fmt.Println("task_delete")*/
		}
	case 36:
		{ /*fmt.Println("task_delete")*/
		}
	case 37:
		{ /*fmt.Println("task_delete")*/
		}
	case 38:
		{ /*fmt.Println("task_set")*/
		}
	case 39:
		{ /*fmt.Println("task_set")*/
		}
	case 40:
		{ /*fmt.Println("task_set")*/
		}
	case 41:
		{ /*fmt.Println("task_set")*/
		}
	case 42:
		{ /*fmt.Println("task_set")*/
		}
	case 43:
		{ /*fmt.Println("task_set")*/
		}
	case 44:
		{ /*fmt.Println("tag_help")*/
		}
	case 45:
		{ /*fmt.Println("tag_help")*/
		}
	case 46:
		{ /*fmt.Println("tag_help")*/
		}
	case 47:
		{ /*fmt.Println("tag_list")*/
		}
	case 48:
		{ /*fmt.Println("task_set")*/
		}
	case 49:
		{ /*fmt.Println("task_list_filter-end")*/
		}
	case 50:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 51:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 52:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 53:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 54:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 55:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 56:
		{ /*fmt.Println("task_add_filter")*/
		}
	case 57:
		{ /*fmt.Println("task_add_filter")*/
		}
	case 58:
		{ /*fmt.Println("task_add_filter")*/
		}
	case 59:
		{ /*fmt.Println("task_add_filter")*/
		}
	case 60:
		{ /*fmt.Println("task_update_filter")*/
		}
	case 61:
		{ /*fmt.Println("task_update_filter")*/
		}
	case 62:
		{ /*fmt.Println("task_update_filter")*/
		}
	case 63:
		{ /*fmt.Println("task_update_filter")*/
		}
	case 64:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 65:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 66:
		{ /*fmt.Println("task_list_filter")*/
		}
	case 67:
		{
			yyVAL.str = yyS[yypt-1].str + yyS[yypt-0].str
			// fmt.Println("id_group:", $1, $2)
		}
	case 68:
		{
			yyVAL.str = yyS[yypt-2].str + yyS[yypt-1].str
			// fmt.Println("id_group:",$1, $3)
		}
	case 69:
		{
			yyVAL.str = yyS[yypt-0].str
			// fmt.Println("id_group:", $1)
		}
	case 70:
		{
			yyVAL.str = yyS[yypt-0].str
			// fmt.Printf("id:%s\n", $1)
		}
	case 71:
		{ /*fmt.Println("content_group")*/
		}
	case 72:
		{ /*fmt.Println("content_group")*/
		}
	case 73:
		{ /*fmt.Println("content_logic")*/
		}
	case 74:
		{ /*fmt.Println("content_logic")*/
		}
	case 75:
		{ /*fmt.Println("content_logic")*/
		}
	case 76:
		{ /*fmt.Println("content_logic")*/
		}
	case 77:
		{ /*fmt.Println("assign_group")*/
		}
	case 78:
		{ /*fmt.Println("assign_group")*/
		}
	case 79:
		{ /*fmt.Println("assign_group")*/
		}
	case 80:
		{ /*fmt.Println("positive_assign_group")*/
		}
	case 81:
		{ /*fmt.Println("positive_assign_group")*/
		}
	case 82:
		{ /*fmt.Println("assign_tag")*/
		}
	case 83:
		{ /*fmt.Println("unassign_tag")*/
		}
	case 89:
		{
			fmt.Println("content-end")
		}
	case 90:
		{
			fmt.Println("content-merge")
		}
	case 91:
		{
			fmt.Println("content-merge")
		}
	case 92:
		{
			fmt.Println("content-merge")
		}
	case 93:
		{
			fmt.Println("content-merge")
		}
	case 94:
		{
			fmt.Println("content-merge")
		}
	case 95:
		{
			fmt.Println("content-merge")
		}
	case 96:
		{
			fmt.Println("content-merge")
		}
	case 97:
		{
			fmt.Println("content-merge")
		}
	case 98:
		{
			fmt.Println("content-merge")
		}
	case 99:
		{
			fmt.Println("content-merge")
		}
	case 100:
		{
			fmt.Println("content-merge")
		}
	case 101:
		{
			fmt.Println("content-merge")
		}
	case 102:
		{
			fmt.Println("content-merge")
		}
	case 103:
		{
			fmt.Println("content-merge")
		}
	case 104:
		{
			fmt.Println("content-merge")
		}
	case 105:
		{
			fmt.Println("content-merge")
		}
	case 106:
		{
			fmt.Println("content-merge")
		}
	case 107:
		{ /*fmt.Println("time_list_filter")*/
		}
	case 108:
		{ /*fmt.Println("time_list_filter")*/
		}
	case 109:
		{ /*fmt.Println("time_single")*/
		}
	case 110:
		{ /*fmt.Println("time_single")*/
		}
	case 111:
		{ /*fmt.Println("time_range")*/
		}
	case 112:
		{ /*fmt.Println("loop_time")*/
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
