// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"errors"
	"fmt"
	"github.com/SpicyChickenFLY/never-todo-cmd/ast"
	"github.com/SpicyChickenFLY/never-todo-cmd/utils"
	"strconv"
	"strings"
)

type yySymType struct {
	yys                          int
	str                          string
	num                          int
	root                         *ast.RootNode
	stmt                         ast.StmtNode
	taskListNode                 *ast.TaskListNode
	taskListFilterNode           *ast.TaskListFilterNode
	indefiniteTaskListFilterNode *ast.IndefiniteTaskListFilterNode
	taskListOptionNode           *ast.TaskListOptionNode
	taskAddNode                  *ast.TaskAddNode
	taskAddOptionNode            *ast.TaskAddOptionNode
	taskTodoNode                 *ast.TaskTodoNode
	taskDeleteNode               *ast.TaskDeleteNode
	taskDoneNode                 *ast.TaskDoneNode
	taskUpdateNode               *ast.TaskUpdateNode
	taskUpdateOptionNode         *ast.TaskUpdateOptionNode
	tagListNode                  *ast.TagListNode
	tagListFilterNode            *ast.TagListFilterNode
	tagAddNode                   *ast.TagAddNode
	tagUpdateNode                *ast.TagUpdateNode
	tagUpdateOptionNode          *ast.TagUpdateOptionNode
	tagDeleteNode                *ast.TagDeleteNode
	idGroupNode                  *ast.IDGroupNode
	contentGroupNode             *ast.ContentGroupNode
	assignGroupNode              *ast.AssignGroupNode
	timeFilterNode               *ast.TimeFilterNode
	timeNode                     *ast.TimeNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57377
	yyEofCode  = 57344
	ADD        = 57366
	AGE        = 57370
	AND        = 57349
	COLOR      = 57374
	DATE       = 57357
	DELETE     = 57367
	DONE       = 57368
	DUE        = 57371
	EXPLAIN    = 57361
	HELP       = 57376
	IDENT      = 57355
	IMPORTANCE = 57373
	LBRACK     = 57351
	LOG        = 57362
	LOOP       = 57372
	MINUS      = 57347
	MULTI      = 57353
	NOT        = 57348
	NUM        = 57354
	OR         = 57350
	PLUS       = 57346
	PROJECT    = 57369
	RBRACK     = 57352
	SETENCE    = 57356
	SORT       = 57375
	TAG        = 57365
	TIME       = 57358
	TODO       = 57364
	UI         = 57360
	UNDO       = 57363
	WEEK       = 57359
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -145
)

var (
	yyPrec = map[int]int{
		PLUS:  0,
		MINUS: 0,
		NOT:   1,
		AND:   2,
		OR:    2,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (170x)
		57376: 1,  // HELP (138x)
		57354: 2,  // NUM (123x)
		57357: 3,  // DATE (119x)
		57358: 4,  // TIME (119x)
		57367: 5,  // DELETE (115x)
		57368: 6,  // DONE (115x)
		57366: 7,  // ADD (110x)
		57355: 8,  // IDENT (110x)
		57369: 9,  // PROJECT (110x)
		57365: 10, // TAG (110x)
		57364: 11, // TODO (110x)
		57356: 12, // SETENCE (109x)
		57347: 13, // MINUS (101x)
		57371: 14, // DUE (99x)
		57373: 15, // IMPORTANCE (99x)
		57346: 16, // PLUS (99x)
		57375: 17, // SORT (84x)
		57351: 18, // LBRACK (75x)
		57348: 19, // NOT (75x)
		57370: 20, // AGE (71x)
		57353: 21, // MULTI (71x)
		57381: 22, // content (45x)
		57386: 23, // definite_content (45x)
		57391: 24, // indefinite_content (45x)
		57349: 25, // AND (37x)
		57379: 26, // assign_tag (36x)
		57374: 27, // COLOR (36x)
		57350: 28, // OR (34x)
		57390: 29, // importance (33x)
		57352: 30, // RBRACK (31x)
		57378: 31, // assign_group (27x)
		57419: 32, // unassign_tag (27x)
		57383: 33, // content_logic_p1 (19x)
		57384: 34, // content_logic_p2 (18x)
		57385: 35, // content_logic_p3 (17x)
		57382: 36, // content_group (15x)
		57388: 37, // id (15x)
		57395: 38, // project (15x)
		57389: 39, // id_group (12x)
		57394: 40, // positive_assign_group (9x)
		57417: 41, // time (9x)
		57392: 42, // indefinite_task_list_filter (8x)
		57380: 43, // color (7x)
		57418: 44, // time_filter (6x)
		57415: 45, // task_update_option (5x)
		57416: 46, // task_update_option_first (5x)
		57397: 47, // sort (4x)
		57407: 48, // task_add_option (4x)
		57404: 49, // tag_update_option (3x)
		57405: 50, // tag_update_option_first (3x)
		57362: 51, // LOG (2x)
		57393: 52, // log_list (2x)
		57398: 53, // stmt (2x)
		57399: 54, // tag_add (2x)
		57400: 55, // tag_delete (2x)
		57401: 56, // tag_list (2x)
		57403: 57, // tag_update (2x)
		57406: 58, // task_add (2x)
		57408: 59, // task_delete (2x)
		57409: 60, // task_done (2x)
		57410: 61, // task_list (2x)
		57411: 62, // task_list_filter (2x)
		57412: 63, // task_list_option (2x)
		57414: 64, // task_update (2x)
		57363: 65, // UNDO (2x)
		57420: 66, // undo_log (2x)
		57361: 67, // EXPLAIN (1x)
		57387: 68, // help (1x)
		57396: 69, // root (1x)
		57402: 70, // tag_list_filter (1x)
		57360: 71, // UI (1x)
		57377: 72, // $default (0x)
		57345: 73, // error (0x)
		57372: 74, // LOOP (0x)
		57413: 75, // task_todo (0x)
		57359: 76, // WEEK (0x)
	}

	yySymNames = []string{
		"$end",
		"HELP",
		"NUM",
		"DATE",
		"TIME",
		"DELETE",
		"DONE",
		"ADD",
		"IDENT",
		"PROJECT",
		"TAG",
		"TODO",
		"SETENCE",
		"MINUS",
		"DUE",
		"IMPORTANCE",
		"PLUS",
		"SORT",
		"LBRACK",
		"NOT",
		"AGE",
		"MULTI",
		"content",
		"definite_content",
		"indefinite_content",
		"AND",
		"assign_tag",
		"COLOR",
		"OR",
		"importance",
		"RBRACK",
		"assign_group",
		"unassign_tag",
		"content_logic_p1",
		"content_logic_p2",
		"content_logic_p3",
		"content_group",
		"id",
		"project",
		"id_group",
		"positive_assign_group",
		"time",
		"indefinite_task_list_filter",
		"color",
		"time_filter",
		"task_update_option",
		"task_update_option_first",
		"sort",
		"task_add_option",
		"tag_update_option",
		"tag_update_option_first",
		"LOG",
		"log_list",
		"stmt",
		"tag_add",
		"tag_delete",
		"tag_list",
		"tag_update",
		"task_add",
		"task_delete",
		"task_done",
		"task_list",
		"task_list_filter",
		"task_list_option",
		"task_update",
		"UNDO",
		"undo_log",
		"EXPLAIN",
		"help",
		"root",
		"tag_list_filter",
		"UI",
		"$default",
		"error",
		"LOOP",
		"task_todo",
		"WEEK",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {69, 1},
		2:   {69, 2},
		3:   {69, 1},
		4:   {69, 1},
		5:   {53, 1},
		6:   {53, 1},
		7:   {53, 1},
		8:   {53, 1},
		9:   {53, 1},
		10:  {53, 1},
		11:  {53, 1},
		12:  {53, 1},
		13:  {53, 1},
		14:  {53, 1},
		15:  {53, 1},
		16:  {68, 1},
		17:  {68, 2},
		18:  {68, 2},
		19:  {68, 2},
		20:  {68, 2},
		21:  {68, 2},
		22:  {68, 2},
		23:  {68, 2},
		24:  {68, 2},
		25:  {52, 1},
		26:  {52, 2},
		27:  {66, 1},
		28:  {66, 2},
		29:  {61, 2},
		30:  {58, 3},
		31:  {75, 2},
		32:  {75, 2},
		33:  {60, 2},
		34:  {60, 2},
		35:  {59, 2},
		36:  {59, 2},
		37:  {64, 2},
		38:  {62, 0},
		39:  {62, 1},
		40:  {62, 1},
		41:  {42, 0},
		42:  {42, 2},
		43:  {42, 2},
		44:  {42, 2},
		45:  {42, 2},
		46:  {42, 2},
		47:  {42, 2},
		48:  {42, 3},
		49:  {42, 3},
		50:  {42, 3},
		51:  {42, 3},
		52:  {42, 2},
		53:  {42, 2},
		54:  {63, 0},
		55:  {63, 2},
		56:  {63, 2},
		57:  {48, 0},
		58:  {48, 2},
		59:  {48, 2},
		60:  {48, 2},
		61:  {48, 2},
		62:  {48, 3},
		63:  {48, 3},
		64:  {45, 1},
		65:  {45, 2},
		66:  {45, 2},
		67:  {45, 2},
		68:  {45, 2},
		69:  {45, 2},
		70:  {45, 2},
		71:  {45, 3},
		72:  {45, 3},
		73:  {46, 1},
		74:  {46, 1},
		75:  {46, 1},
		76:  {46, 2},
		77:  {56, 2},
		78:  {54, 3},
		79:  {54, 4},
		80:  {55, 3},
		81:  {57, 3},
		82:  {70, 0},
		83:  {70, 1},
		84:  {70, 1},
		85:  {49, 1},
		86:  {49, 2},
		87:  {49, 2},
		88:  {49, 2},
		89:  {49, 2},
		90:  {50, 1},
		91:  {50, 1},
		92:  {47, 2},
		93:  {38, 2},
		94:  {31, 1},
		95:  {31, 1},
		96:  {31, 2},
		97:  {31, 2},
		98:  {40, 1},
		99:  {40, 2},
		100: {26, 2},
		101: {32, 2},
		102: {44, 1},
		103: {44, 3},
		104: {41, 1},
		105: {41, 1},
		106: {41, 2},
		107: {29, 1},
		108: {43, 2},
		109: {39, 2},
		110: {39, 3},
		111: {39, 1},
		112: {37, 1},
		113: {37, 2},
		114: {36, 1},
		115: {35, 1},
		116: {35, 3},
		117: {34, 1},
		118: {34, 3},
		119: {33, 1},
		120: {33, 3},
		121: {33, 2},
		122: {22, 1},
		123: {22, 1},
		124: {23, 1},
		125: {24, 1},
		126: {24, 1},
		127: {24, 1},
		128: {24, 1},
		129: {24, 1},
		130: {24, 1},
		131: {24, 1},
		132: {24, 1},
		133: {24, 1},
		134: {24, 1},
		135: {24, 2},
		136: {24, 2},
		137: {24, 2},
		138: {24, 2},
		139: {24, 2},
		140: {24, 2},
		141: {24, 2},
		142: {24, 2},
		143: {24, 2},
		144: {24, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [193][]uint16{
		// 0
		{107, 162, 185, 198, 199, 169, 167, 166, 195, 197, 178, 196, 194, 183, 176, 184, 182, 107, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 170, 177, 168, 42: 171, 51: 163, 151, 149, 159, 160, 158, 161, 154, 155, 157, 153, 165, 64: 156, 164, 152, 148, 150, 146, 71: 147},
		{145},
		{144},
		{107, 2: 185, 198, 199, 169, 167, 166, 195, 197, 178, 196, 194, 183, 176, 184, 182, 107, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 170, 177, 168, 42: 171, 51: 163, 151, 329, 335, 336, 334, 337, 331, 332, 157, 330, 165, 64: 333, 164, 152},
		{142},
		// 5
		{141},
		{140},
		{139},
		{138, 328},
		{137, 327},
		// 10
		{136, 326},
		{135, 325},
		{134},
		{133, 324},
		{132, 323},
		// 15
		{131, 322},
		{130, 321},
		{129},
		{120, 2: 320},
		{118, 2: 239, 13: 235, 37: 319},
		// 20
		{91, 91, 17: 315, 47: 314, 63: 313},
		{16, 16, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 16, 16, 16, 16, 16, 16, 16, 16, 16, 298, 192, 193, 16, 28: 16},
		{14, 14, 239, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 235, 14, 14, 14, 14, 14, 14, 14, 14, 25: 14, 28: 14, 37: 238, 39: 297},
		{106, 106, 239, 5: 296, 295, 13: 235, 17: 106, 37: 238, 39: 237},
		{15, 15, 239, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 235, 15, 15, 15, 15, 15, 15, 15, 15, 25: 15, 28: 15, 37: 238, 39: 294},
		// 25
		{34, 34, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 283, 282, 184, 182, 34, 22: 279, 192, 193, 26: 180, 29: 281, 31: 280, 181, 45: 277, 278},
		{105, 105, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 260, 184, 182, 105, 190, 191, 259, 179, 189, 192, 193, 26: 180, 29: 257, 31: 258, 181, 188, 187, 186, 256, 38: 261},
		{104, 104, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 176, 184, 182, 104, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 38: 177, 42: 276},
		{104, 104, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 176, 184, 182, 104, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 38: 177, 42: 275},
		{104, 104, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 176, 184, 182, 104, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 38: 177, 42: 274},
		// 30
		{3: 264, 265, 41: 263, 44: 272},
		{3: 264, 265, 41: 263, 44: 270},
		{104, 104, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 176, 184, 182, 104, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 38: 177, 42: 255},
		{63, 63, 185, 198, 199, 231, 215, 230, 195, 197, 212, 196, 194, 235, 17, 17, 17, 17, 17, 17, 17, 17, 234, 192, 193, 17, 28: 17, 37: 232, 39: 233, 70: 229},
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 228, 192, 193},
		// 35
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 226, 51, 51, 182, 51, 51, 51, 51, 51, 26: 180, 31: 227, 181},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 226, 50, 50, 182, 50, 50, 50, 50, 50, 26: 180, 31: 225, 181},
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 224, 192, 193},
		{2: 223, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 222, 192, 193},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		// 40
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 20, 20, 20, 20, 25: 20, 27: 33, 20},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 25: 217},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 25: 30, 28: 220, 30: 30},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25: 28, 28: 28, 30: 28},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25: 26, 28: 26, 30: 26},
		// 45
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 18: 190, 191, 22: 189, 192, 193, 33: 188, 187, 216},
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 18: 190, 191, 22: 189, 192, 193, 33: 210},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25: 23, 27: 23, 23, 30: 23},
		{22, 22, 200, 208, 209, 205, 206, 204, 201, 207, 203, 202, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25: 22, 27: 22, 22, 30: 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25: 21, 27: 21, 21, 30: 21},
		// 50
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 25: 19, 27: 19, 19, 30: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 25: 18, 27: 18, 18, 30: 18},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 25: 13, 27: 13, 13, 30: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 25: 12, 27: 12, 12, 30: 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 25: 11, 27: 11, 11, 30: 11},
		// 55
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25: 10, 27: 10, 10, 30: 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25: 9, 27: 9, 9, 30: 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 25: 8, 27: 8, 8, 30: 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 25: 7, 27: 7, 7, 30: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 25: 6, 27: 6, 6, 30: 6},
		// 60
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 5, 27: 5, 5, 30: 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 25: 4, 27: 4, 4, 30: 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 25: 3, 27: 3, 3, 30: 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25: 2, 27: 2, 2, 30: 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 25: 1, 27: 1, 1, 30: 1},
		// 65
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25: 24, 28: 24, 30: 24},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 25: 20, 27: 20, 20, 30: 20},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 25: 17, 27: 17, 17, 30: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25: 16, 27: 16, 16, 30: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25: 15, 27: 15, 15, 30: 15},
		// 70
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 25: 14, 27: 14, 14, 30: 14},
		{25: 217, 30: 218},
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 18: 190, 191, 22: 189, 192, 193, 33: 188, 187, 219},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25: 25, 28: 25, 30: 25},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25: 29, 30: 29},
		// 75
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 18: 190, 191, 22: 189, 192, 193, 33: 188, 221},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 25: 27, 28: 27, 30: 27},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 20, 20, 20, 20},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		// 80
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 222, 192, 193},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{68, 68},
		// 85
		{16, 16, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 253, 192, 193},
		{15, 15, 239, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13: 235, 37: 238, 39: 252},
		{34, 34, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 240, 22: 244, 192, 193, 27: 246, 43: 245, 49: 242, 243},
		{62, 62, 239, 13: 235, 37: 238, 39: 237},
		{61, 61},
		// 90
		{2: 236},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 17: 32, 27: 32},
		{36, 36, 239, 5: 36, 36, 13: 235, 17: 36, 37: 238, 39: 237},
		{34, 34, 34, 5: 34, 34, 13: 240, 17: 34},
		{33, 33, 33, 5: 33, 33, 13: 33, 17: 33},
		// 95
		{2: 239, 13: 235, 37: 241},
		{35, 35, 35, 5: 35, 35, 13: 35, 17: 35},
		{64, 64, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 249, 192, 193, 27: 246, 43: 250},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 27: 60},
		{55, 55, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 244, 192, 193, 27: 246, 43: 245, 49: 251, 243},
		// 100
		{54, 54, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 244, 192, 193, 27: 246, 43: 245, 49: 248, 243},
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 247, 192, 193},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 27: 37},
		{57, 57, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 249, 192, 193, 27: 246, 43: 250},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 27: 58},
		// 105
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 27: 56},
		{59, 59, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 249, 192, 193, 27: 246, 43: 250},
		{65, 65, 239, 13: 235, 37: 238, 39: 237},
		{67, 67, 27: 246, 43: 254},
		{66, 66},
		// 110
		{93, 93, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 260, 184, 182, 93, 190, 191, 259, 179, 189, 192, 193, 26: 180, 29: 257, 31: 258, 181, 188, 187, 186, 256, 38: 261},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{3: 264, 265, 41: 263, 44: 269},
		// 115
		{3: 264, 265, 41: 263, 44: 262},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 267, 43, 43, 43, 43, 43, 43, 43, 43},
		{41, 41, 41, 41, 266, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 120
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{3: 264, 265, 41: 268},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		// 125
		{104, 104, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 176, 184, 182, 104, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 38: 177, 42: 271},
		{95, 95, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 260, 184, 182, 95, 190, 191, 259, 179, 189, 192, 193, 26: 180, 29: 257, 31: 258, 181, 188, 187, 186, 256, 38: 261},
		{104, 104, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 176, 184, 182, 104, 190, 191, 175, 179, 189, 192, 193, 26: 180, 29: 173, 31: 174, 181, 188, 187, 186, 172, 38: 177, 42: 273},
		{97, 97, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 260, 184, 182, 97, 190, 191, 259, 179, 189, 192, 193, 26: 180, 29: 257, 31: 258, 181, 188, 187, 186, 256, 38: 261},
		{99, 99, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 260, 184, 182, 99, 190, 191, 259, 179, 189, 192, 193, 26: 180, 29: 257, 31: 258, 181, 188, 187, 186, 256, 38: 261},
		// 130
		{101, 101, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 260, 184, 182, 101, 190, 191, 259, 179, 189, 192, 193, 26: 180, 29: 257, 31: 258, 181, 188, 187, 186, 256, 38: 261},
		{103, 103, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 260, 184, 182, 103, 190, 191, 259, 179, 189, 192, 193, 26: 180, 29: 257, 31: 258, 181, 188, 187, 186, 256, 38: 261},
		{108, 108, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 289, 184, 182, 22: 286, 192, 193, 26: 180, 29: 288, 31: 287, 181},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{72, 72, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 282, 184, 182, 22: 279, 192, 193, 26: 180, 29: 281, 31: 280, 181, 45: 293, 278},
		// 135
		{71, 71, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 282, 184, 182, 22: 279, 192, 193, 26: 180, 29: 281, 31: 280, 181, 45: 292, 278},
		{70, 70, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 282, 184, 182, 22: 279, 192, 193, 26: 180, 29: 281, 31: 280, 181, 45: 291, 278},
		{3: 264, 265, 41: 284},
		{2: 185, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 235, 22: 222, 192, 193, 37: 241},
		{69, 69, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 282, 184, 182, 22: 279, 192, 193, 26: 180, 29: 281, 31: 280, 181, 45: 285, 278},
		// 140
		{73, 73, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 289, 184, 182, 22: 286, 192, 193, 26: 180, 29: 288, 31: 287, 181},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{3: 264, 265, 41: 290},
		// 145
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{75, 75, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 289, 184, 182, 22: 286, 192, 193, 26: 180, 29: 288, 31: 287, 181},
		{78, 78, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 289, 184, 182, 22: 286, 192, 193, 26: 180, 29: 288, 31: 287, 181},
		{80, 80, 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 226, 289, 184, 182, 22: 286, 192, 193, 26: 180, 29: 288, 31: 287, 181},
		{110, 110, 239, 13: 235, 37: 238, 39: 237},
		// 150
		{111},
		{109, 109},
		{112, 2: 239, 13: 235, 37: 238, 39: 237},
		{88, 88, 14: 302, 184, 182, 26: 303, 29: 301, 40: 300, 48: 299},
		{115, 115, 14: 309, 184, 182, 26: 303, 29: 308, 40: 307},
		// 155
		{88, 88, 14: 302, 184, 182, 26: 303, 29: 301, 40: 300, 48: 312},
		{88, 88, 14: 302, 184, 182, 26: 303, 29: 301, 40: 300, 48: 311},
		{3: 264, 265, 41: 263, 44: 305},
		{47, 47, 14: 47, 47, 182, 26: 303, 40: 304},
		{46, 46, 14: 46, 46, 46},
		// 160
		{88, 88, 14: 302, 184, 182, 26: 303, 29: 301, 40: 300, 48: 306},
		{82, 82, 14: 309, 184, 182, 26: 303, 29: 308, 40: 307},
		{86, 86, 14: 86, 86, 86},
		{85, 85, 14: 85, 85, 85},
		{3: 264, 265, 41: 263, 44: 310},
		// 165
		{83, 83, 14: 83, 83, 83},
		{84, 84, 14: 309, 184, 182, 26: 303, 29: 308, 40: 307},
		{87, 87, 14: 309, 184, 182, 26: 303, 29: 308, 40: 307},
		{116, 116, 17: 315, 47: 318},
		{91, 91, 17: 315, 47: 314, 63: 317},
		// 170
		{2: 211, 198, 199, 214, 215, 213, 195, 197, 212, 196, 194, 22: 316, 192, 193},
		{53, 53, 17: 53},
		{90, 90, 17: 315, 47: 318},
		{89, 89, 17: 89},
		{117},
		// 175
		{119},
		{121},
		{122},
		{123},
		{124},
		// 180
		{125},
		{126},
		{127},
		{128},
		{143},
		// 185
		{138},
		{137},
		{136},
		{135},
		{133},
		// 190
		{132},
		{131},
		{130},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 73

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			ast.Result = ast.NewRootNode(ast.CMDUI, nil)
		}
	case 2:
		{
			ast.Result = ast.NewRootNode(ast.CMDExplain, yyS[yypt-0].stmt)
		}
	case 3:
		{
			ast.Result = ast.NewRootNode(ast.CMDStmt, yyS[yypt-0].stmt)
		}
	case 4:
		{
			ast.Result = ast.NewRootNode(ast.CMDHelp, nil)
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].taskListNode
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].taskAddNode
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].taskDeleteNode
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].taskUpdateNode
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].taskDoneNode
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].tagListNode
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].tagAddNode
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].tagDeleteNode
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].tagUpdateNode
		}
	case 29:
		{
			yyVAL.taskListNode = ast.NewTaskListNode(yyS[yypt-1].taskListFilterNode, yyS[yypt-0].taskListOptionNode)
		}
	case 30:
		{
			yyVAL.taskAddNode = ast.NewTaskAddNode(yyS[yypt-1].str, yyS[yypt-0].taskAddOptionNode)
		}
	case 31:
		{
			yyVAL.taskTodoNode = ast.NewTaskTodoNode(yyS[yypt-1].idGroupNode)
		}
	case 32:
		{
			yyVAL.taskTodoNode = ast.NewTaskTodoNode(yyS[yypt-0].idGroupNode)
		}
	case 33:
		{
			yyVAL.taskDoneNode = ast.NewTaskDoneNode(yyS[yypt-0].idGroupNode)
		}
	case 34:
		{
			yyVAL.taskDoneNode = ast.NewTaskDoneNode(yyS[yypt-1].idGroupNode)
		}
	case 35:
		{
			yyVAL.taskDeleteNode = ast.NewTaskDeleteNode(yyS[yypt-0].idGroupNode)
		}
	case 36:
		{
			yyVAL.taskDeleteNode = ast.NewTaskDeleteNode(yyS[yypt-1].idGroupNode)
		}
	case 37:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-1].num, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 38:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(nil, nil)
		}
	case 39:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(yyS[yypt-0].idGroupNode, nil)
		}
	case 40:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(nil, yyS[yypt-0].indefiniteTaskListFilterNode)
		}
	case 41:
		{
			yyVAL.indefiniteTaskListFilterNode = ast.NewIndefiniteTaskListFilterNode()
		}
	case 42:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetContentGroup(yyS[yypt-1].contentGroupNode)
		}
	case 43:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.SetContentGroup(yyS[yypt-0].contentGroupNode)
		}
	case 44:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetImportance(yyS[yypt-1].num)
		}
	case 45:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.SetImportance(yyS[yypt-0].num)
		}
	case 46:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.MergeAssignGroup(yyS[yypt-1].assignGroupNode)
		}
	case 47:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.MergeAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 48:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetAge(yyS[yypt-1].timeFilterNode)
		}
	case 49:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-2].indefiniteTaskListFilterNode.SetAge(yyS[yypt-0].timeFilterNode)
		}
	case 50:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetDue(yyS[yypt-1].timeFilterNode)
		}
	case 51:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-2].indefiniteTaskListFilterNode.SetDue(yyS[yypt-0].timeFilterNode)
		}
	case 52:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetProject(yyS[yypt-1].str)
		}
	case 53:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.SetProject(yyS[yypt-0].str)
		}
	case 54:
		{
			yyVAL.taskListOptionNode = ast.NewTaskListOptionNode()
		}
	case 55:
		{
			yyVAL.taskListOptionNode = yyS[yypt-0].taskListOptionNode.SetSortMetric(yyS[yypt-1].str)
		}
	case 56:
		{
			yyVAL.taskListOptionNode = yyS[yypt-1].taskListOptionNode.SetSortMetric(yyS[yypt-0].str)
		}
	case 57:
		{
			yyVAL.taskAddOptionNode = ast.NewTaskAddOptionNode()
		}
	case 58:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-0].taskAddOptionNode.SetAssignGroup(yyS[yypt-1].assignGroupNode)
		}
	case 59:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-1].taskAddOptionNode.SetAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 60:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-1].taskAddOptionNode.SetImportance(yyS[yypt-0].num)
		}
	case 61:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-0].taskAddOptionNode.SetImportance(yyS[yypt-1].num)
		}
	case 62:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-2].taskAddOptionNode.SetDue(yyS[yypt-0].timeFilterNode)
		}
	case 63:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-0].taskAddOptionNode.SetDue(yyS[yypt-1].timeFilterNode)
		}
	case 64:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode
		}
	case 65:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetContent(yyS[yypt-1].str)
		}
	case 66:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-1].taskUpdateOptionNode.SetContent(yyS[yypt-0].str)
		}
	case 67:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetAssignGroup(yyS[yypt-1].assignGroupNode)
		}
	case 68:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-1].taskUpdateOptionNode.SetAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 69:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-1].taskUpdateOptionNode.SetImportance(yyS[yypt-0].num)
		}
	case 70:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetImportance(yyS[yypt-1].num)
		}
	case 71:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-2].taskUpdateOptionNode.SetDue(yyS[yypt-0].timeNode)
		}
	case 72:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetDue(yyS[yypt-1].timeNode)
		}
	case 73:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetContent(yyS[yypt-0].str)
		}
	case 74:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 75:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetImportance(yyS[yypt-0].num)
		}
	case 76:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetDue(yyS[yypt-0].timeNode)
		}
	case 77:
		{
			yyVAL.tagListNode = ast.NewTagListNode(yyS[yypt-0].tagListFilterNode)
		}
	case 78:
		{
			yyVAL.tagAddNode = ast.NewTagAddNode(yyS[yypt-0].str, "")
		}
	case 79:
		{
			yyVAL.tagAddNode = ast.NewTagAddNode(yyS[yypt-1].str, yyS[yypt-0].str)
		}
	case 80:
		{
			yyVAL.tagDeleteNode = ast.NewTagDeleteNode(yyS[yypt-0].idGroupNode)
		}
	case 81:
		{
			yyVAL.tagUpdateNode = ast.NewTagUpdateNode(yyS[yypt-1].num, yyS[yypt-0].tagUpdateOptionNode)
		}
	case 82:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(nil, "")
		}
	case 83:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(yyS[yypt-0].idGroupNode, "")
		}
	case 84:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(nil, yyS[yypt-0].str)
		}
	case 85:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-0].tagUpdateOptionNode
		}
	case 86:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-0].tagUpdateOptionNode.SetContent(yyS[yypt-1].str)
		}
	case 87:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-1].tagUpdateOptionNode.SetContent(yyS[yypt-0].str)
		}
	case 88:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-0].tagUpdateOptionNode.SetColor(yyS[yypt-1].str)
		}
	case 89:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-1].tagUpdateOptionNode.SetColor(yyS[yypt-0].str)
		}
	case 90:
		{
			yyVAL.tagUpdateOptionNode = ast.NewTagUpdateOptionNode().SetContent(yyS[yypt-0].str)
		}
	case 91:
		{
			yyVAL.tagUpdateOptionNode = ast.NewTagUpdateOptionNode().SetColor(yyS[yypt-0].str)
		}
	case 92:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 93:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 94:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode(yyS[yypt-0].str, "")
		}
	case 95:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode("", yyS[yypt-0].str)
		}
	case 96:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode.AssignTag(yyS[yypt-1].str)
		}
	case 97:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode.UnassignTag(yyS[yypt-1].str)
		}
	case 98:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode(yyS[yypt-0].str, "")
		}
	case 99:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode.AssignTag(yyS[yypt-1].str)
		}
	case 100:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 101:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 102:
		{
			yyVAL.timeFilterNode = ast.NewTimeFilterNode(yyS[yypt-0].timeNode, nil)
		}
	case 103:
		{
			yyVAL.timeFilterNode = ast.NewTimeFilterNode(yyS[yypt-2].timeNode, yyS[yypt-0].timeNode)
		}
	case 104:
		{
			yyVAL.timeNode = ast.NewTimeNode(yyS[yypt-0].str, ast.TimeFormatDate)
		}
	case 105:
		{
			yyVAL.timeNode = ast.NewTimeNode(yyS[yypt-0].str, ast.TimeFormatTime)
		}
	case 106:
		{
			yyVAL.timeNode = ast.NewTimeNode(yyS[yypt-1].str+" "+yyS[yypt-0].str, ast.TimeFormatDateTime)
		}
	case 107:
		{
			yyVAL.num, _ = strconv.Atoi(yyS[yypt-0].str)
		}
	case 108:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 109:
		{
			yyVAL.idGroupNode = yyS[yypt-1].idGroupNode.MergeIDNode(yyS[yypt-0].idGroupNode)
		}
	case 110:
		{
			yyVAL.idGroupNode = ast.NewIDGroupNode(yyS[yypt-2].num, yyS[yypt-0].num)
		}
	case 111:
		{
			yyVAL.idGroupNode = ast.NewIDGroupNode(yyS[yypt-0].num)
		}
	case 112:
		{
			yyVAL.num, _ = strconv.Atoi(yyS[yypt-0].str)
		}
	case 113:
		{
			yyVAL.num, _ = strconv.Atoi("-" + yyS[yypt-0].str)
		}
	case 114:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 115:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 116:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPAND, []*ast.ContentGroupNode{yyS[yypt-2].contentGroupNode, yyS[yypt-0].contentGroupNode})
		}
	case 117:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 118:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPOR, []*ast.ContentGroupNode{yyS[yypt-2].contentGroupNode, yyS[yypt-0].contentGroupNode})
		}
	case 119:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode(yyS[yypt-0].str, ast.OPNone, []*ast.ContentGroupNode{})
		}
	case 120:
		{
			yyVAL.contentGroupNode = yyS[yypt-1].contentGroupNode
		}
	case 121:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPNOT, []*ast.ContentGroupNode{yyS[yypt-0].contentGroupNode})
		}
	case 122:
		{
			var err error
			yyVAL.str, err = utils.DecodeCmd(yyS[yypt-0].str)
			if err != nil {
				ast.ErrorList = append(ast.ErrorList, errors.New("Illegal character in CMD"))
			}
		}
	case 123:
		{
			var err error
			yyVAL.str, err = utils.DecodeCmd(strings.Trim(yyS[yypt-0].str, " "))
			if err != nil {
				ast.ErrorList = append(ast.ErrorList, errors.New("Illegal character in CMD"))
			}
		}
	case 124:
		{
			yyVAL.str = ast.SearchVarMap(yyS[yypt-0].str)
		}
	case 125:
		{
			yyVAL.str = fmt.Sprint(yyS[yypt-0].str)
		}
	case 126:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 127:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 128:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 129:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 130:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 131:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 132:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 133:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 134:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 135:
		{
			yyVAL.str = yyS[yypt-1].str + " " + fmt.Sprint(yyS[yypt-0].str)
		}
	case 136:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 137:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 138:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 139:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 140:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 141:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 142:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 143:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 144:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
