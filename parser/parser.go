// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"errors"
	"fmt"
	"github.com/SpicyChickenFLY/never-todo-cmd/ast"
	"github.com/SpicyChickenFLY/never-todo-cmd/model"
	"github.com/SpicyChickenFLY/never-todo-cmd/utils"
	"strconv"
	"strings"
)

type yySymType struct {
	yys                          int
	str                          string
	num                          int
	root                         *ast.RootNode
	stmt                         ast.StmtNode
	taskListNode                 *ast.TaskListNode
	taskListFilterNode           *ast.TaskListFilterNode
	indefiniteTaskListFilterNode *ast.IndefiniteTaskListFilterNode
	taskListOptionNode           *ast.TaskListOptionNode
	taskAddNode                  *ast.TaskAddNode
	taskAddOptionNode            *ast.TaskAddOptionNode
	taskTodoNode                 *ast.TaskTodoNode
	taskDeleteNode               *ast.TaskDeleteNode
	taskDoneNode                 *ast.TaskDoneNode
	taskUpdateNode               *ast.TaskUpdateNode
	taskUpdateOptionNode         *ast.TaskUpdateOptionNode
	tagListNode                  *ast.TagListNode
	tagListFilterNode            *ast.TagListFilterNode
	tagAddNode                   *ast.TagAddNode
	tagUpdateNode                *ast.TagUpdateNode
	tagUpdateOptionNode          *ast.TagUpdateOptionNode
	tagDeleteNode                *ast.TagDeleteNode
	idGroupNode                  *ast.IDGroupNode
	contentGroupNode             *ast.ContentGroupNode
	assignGroupNode              *ast.AssignGroupNode
	timeFilterNode               *ast.TimeFilterNode
	timeNode                     *ast.TimeNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57377
	yyEofCode  = 57344
	ADD        = 57366
	AGE        = 57370
	AND        = 57349
	COLOR      = 57374
	DATE       = 57357
	DELETE     = 57367
	DONE       = 57368
	DUE        = 57371
	EXPLAIN    = 57361
	HELP       = 57376
	IDENT      = 57355
	IMPORTANCE = 57373
	LBRACK     = 57351
	LOG        = 57362
	LOOP       = 57372
	MINUS      = 57347
	MULTI      = 57353
	NOT        = 57348
	NUM        = 57354
	OR         = 57350
	PLUS       = 57346
	PROJECT    = 57369
	RBRACK     = 57352
	SETENCE    = 57356
	SORT       = 57375
	TAG        = 57365
	TIME       = 57358
	TODO       = 57364
	UI         = 57360
	UNDO       = 57363
	WEEK       = 57359
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -148
)

var (
	yyPrec = map[int]int{
		PLUS:  0,
		MINUS: 0,
		NOT:   1,
		AND:   2,
		OR:    2,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (178x)
		57376: 1,  // HELP (147x)
		57354: 2,  // NUM (125x)
		57357: 3,  // DATE (120x)
		57358: 4,  // TIME (120x)
		57367: 5,  // DELETE (116x)
		57368: 6,  // DONE (116x)
		57366: 7,  // ADD (111x)
		57355: 8,  // IDENT (111x)
		57369: 9,  // PROJECT (111x)
		57365: 10, // TAG (111x)
		57364: 11, // TODO (111x)
		57356: 12, // SETENCE (110x)
		57347: 13, // MINUS (103x)
		57371: 14, // DUE (100x)
		57373: 15, // IMPORTANCE (100x)
		57346: 16, // PLUS (100x)
		57375: 17, // SORT (94x)
		57351: 18, // LBRACK (76x)
		57348: 19, // NOT (76x)
		57370: 20, // AGE (72x)
		57353: 21, // MULTI (72x)
		57381: 22, // content (48x)
		57386: 23, // definite_content (48x)
		57391: 24, // indefinite_content (48x)
		57379: 25, // assign_tag (39x)
		57349: 26, // AND (38x)
		57374: 27, // COLOR (36x)
		57390: 28, // importance (36x)
		57350: 29, // OR (35x)
		57352: 30, // RBRACK (31x)
		57378: 31, // assign_group (30x)
		57419: 32, // unassign_tag (30x)
		57383: 33, // content_logic_p1 (22x)
		57384: 34, // content_logic_p2 (21x)
		57385: 35, // content_logic_p3 (20x)
		57382: 36, // content_group (18x)
		57395: 37, // project (18x)
		57388: 38, // id (17x)
		57389: 39, // id_group (14x)
		57392: 40, // indefinite_task_list_filter (11x)
		57397: 41, // sort (10x)
		57394: 42, // positive_assign_group (9x)
		57417: 43, // time (9x)
		57380: 44, // color (7x)
		57418: 45, // time_filter (6x)
		57411: 46, // task_list_filter (5x)
		57412: 47, // task_list_option (5x)
		57415: 48, // task_update_option (5x)
		57416: 49, // task_update_option_first (5x)
		57407: 50, // task_add_option (4x)
		57404: 51, // tag_update_option (3x)
		57405: 52, // tag_update_option_first (3x)
		57362: 53, // LOG (2x)
		57393: 54, // log_list (2x)
		57398: 55, // stmt (2x)
		57399: 56, // tag_add (2x)
		57400: 57, // tag_delete (2x)
		57401: 58, // tag_list (2x)
		57403: 59, // tag_update (2x)
		57406: 60, // task_add (2x)
		57408: 61, // task_delete (2x)
		57409: 62, // task_done (2x)
		57410: 63, // task_list (2x)
		57414: 64, // task_update (2x)
		57363: 65, // UNDO (2x)
		57420: 66, // undo_log (2x)
		57361: 67, // EXPLAIN (1x)
		57387: 68, // help (1x)
		57396: 69, // root (1x)
		57402: 70, // tag_list_filter (1x)
		57360: 71, // UI (1x)
		57377: 72, // $default (0x)
		57345: 73, // error (0x)
		57372: 74, // LOOP (0x)
		57413: 75, // task_todo (0x)
		57359: 76, // WEEK (0x)
	}

	yySymNames = []string{
		"$end",
		"HELP",
		"NUM",
		"DATE",
		"TIME",
		"DELETE",
		"DONE",
		"ADD",
		"IDENT",
		"PROJECT",
		"TAG",
		"TODO",
		"SETENCE",
		"MINUS",
		"DUE",
		"IMPORTANCE",
		"PLUS",
		"SORT",
		"LBRACK",
		"NOT",
		"AGE",
		"MULTI",
		"content",
		"definite_content",
		"indefinite_content",
		"assign_tag",
		"AND",
		"COLOR",
		"importance",
		"OR",
		"RBRACK",
		"assign_group",
		"unassign_tag",
		"content_logic_p1",
		"content_logic_p2",
		"content_logic_p3",
		"content_group",
		"project",
		"id",
		"id_group",
		"indefinite_task_list_filter",
		"sort",
		"positive_assign_group",
		"time",
		"color",
		"time_filter",
		"task_list_filter",
		"task_list_option",
		"task_update_option",
		"task_update_option_first",
		"task_add_option",
		"tag_update_option",
		"tag_update_option_first",
		"LOG",
		"log_list",
		"stmt",
		"tag_add",
		"tag_delete",
		"tag_list",
		"tag_update",
		"task_add",
		"task_delete",
		"task_done",
		"task_list",
		"task_update",
		"UNDO",
		"undo_log",
		"EXPLAIN",
		"help",
		"root",
		"tag_list_filter",
		"UI",
		"$default",
		"error",
		"LOOP",
		"task_todo",
		"WEEK",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {69, 1},
		2:   {69, 2},
		3:   {69, 1},
		4:   {69, 1},
		5:   {55, 1},
		6:   {55, 1},
		7:   {55, 1},
		8:   {55, 1},
		9:   {55, 1},
		10:  {55, 1},
		11:  {55, 1},
		12:  {55, 1},
		13:  {55, 1},
		14:  {55, 1},
		15:  {55, 1},
		16:  {68, 1},
		17:  {68, 2},
		18:  {68, 2},
		19:  {68, 2},
		20:  {68, 2},
		21:  {68, 2},
		22:  {68, 2},
		23:  {68, 2},
		24:  {68, 2},
		25:  {54, 1},
		26:  {54, 2},
		27:  {66, 1},
		28:  {66, 2},
		29:  {63, 2},
		30:  {63, 3},
		31:  {63, 3},
		32:  {63, 3},
		33:  {60, 3},
		34:  {75, 2},
		35:  {75, 2},
		36:  {62, 2},
		37:  {62, 2},
		38:  {61, 2},
		39:  {61, 2},
		40:  {64, 2},
		41:  {46, 0},
		42:  {46, 1},
		43:  {46, 1},
		44:  {40, 0},
		45:  {40, 2},
		46:  {40, 2},
		47:  {40, 2},
		48:  {40, 2},
		49:  {40, 2},
		50:  {40, 2},
		51:  {40, 3},
		52:  {40, 3},
		53:  {40, 3},
		54:  {40, 3},
		55:  {40, 2},
		56:  {40, 2},
		57:  {47, 0},
		58:  {47, 2},
		59:  {47, 2},
		60:  {50, 0},
		61:  {50, 2},
		62:  {50, 2},
		63:  {50, 2},
		64:  {50, 2},
		65:  {50, 3},
		66:  {50, 3},
		67:  {48, 1},
		68:  {48, 2},
		69:  {48, 2},
		70:  {48, 2},
		71:  {48, 2},
		72:  {48, 2},
		73:  {48, 2},
		74:  {48, 3},
		75:  {48, 3},
		76:  {49, 1},
		77:  {49, 1},
		78:  {49, 1},
		79:  {49, 2},
		80:  {58, 2},
		81:  {56, 3},
		82:  {56, 4},
		83:  {57, 3},
		84:  {59, 3},
		85:  {70, 0},
		86:  {70, 1},
		87:  {70, 1},
		88:  {51, 1},
		89:  {51, 2},
		90:  {51, 2},
		91:  {51, 2},
		92:  {51, 2},
		93:  {52, 1},
		94:  {52, 1},
		95:  {41, 2},
		96:  {37, 2},
		97:  {31, 1},
		98:  {31, 1},
		99:  {31, 2},
		100: {31, 2},
		101: {42, 1},
		102: {42, 2},
		103: {25, 2},
		104: {32, 2},
		105: {45, 1},
		106: {45, 3},
		107: {43, 1},
		108: {43, 1},
		109: {43, 2},
		110: {28, 1},
		111: {44, 2},
		112: {39, 2},
		113: {39, 3},
		114: {39, 1},
		115: {38, 1},
		116: {38, 2},
		117: {36, 1},
		118: {35, 1},
		119: {35, 3},
		120: {34, 1},
		121: {34, 3},
		122: {33, 1},
		123: {33, 3},
		124: {33, 2},
		125: {22, 1},
		126: {22, 1},
		127: {23, 1},
		128: {24, 1},
		129: {24, 1},
		130: {24, 1},
		131: {24, 1},
		132: {24, 1},
		133: {24, 1},
		134: {24, 1},
		135: {24, 1},
		136: {24, 1},
		137: {24, 1},
		138: {24, 2},
		139: {24, 2},
		140: {24, 2},
		141: {24, 2},
		142: {24, 2},
		143: {24, 2},
		144: {24, 2},
		145: {24, 2},
		146: {24, 2},
		147: {24, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [201][]uint16{
		// 0
		{107, 165, 189, 201, 202, 171, 170, 172, 199, 200, 182, 169, 198, 187, 180, 188, 186, 107, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 174, 173, 175, 46: 168, 53: 166, 154, 152, 162, 163, 161, 164, 157, 158, 160, 156, 159, 167, 155, 151, 153, 149, 71: 150},
		{148},
		{147},
		{107, 2: 189, 201, 202, 171, 170, 172, 199, 200, 182, 169, 198, 187, 180, 188, 186, 107, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 174, 173, 175, 46: 168, 53: 166, 154, 340, 346, 347, 345, 348, 342, 343, 160, 341, 344, 167, 155},
		{145},
		// 5
		{144},
		{143},
		{142},
		{141, 339},
		{140, 338},
		// 10
		{139, 337},
		{138, 336},
		{137},
		{136, 335},
		{135, 334},
		// 15
		{134, 333},
		{133, 332},
		{132},
		{123, 2: 331},
		{121, 2: 243, 13: 239, 38: 330},
		// 20
		{91, 91, 17: 319, 41: 318, 47: 329},
		{107, 107, 189, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 187, 180, 188, 186, 107, 194, 195, 179, 183, 193, 196, 197, 184, 18, 28: 177, 18, 31: 178, 185, 192, 191, 190, 176, 181, 242, 327, 175, 46: 326},
		{107, 107, 189, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 187, 180, 188, 186, 107, 194, 195, 179, 183, 193, 196, 197, 184, 14, 28: 177, 14, 31: 178, 185, 192, 191, 190, 176, 181, 242, 324, 175, 46: 323},
		{107, 107, 189, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 187, 180, 188, 186, 107, 194, 195, 179, 183, 193, 196, 197, 184, 15, 28: 177, 15, 31: 178, 185, 192, 191, 190, 176, 181, 242, 316, 175, 46: 315},
		{16, 16, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 16, 16, 16, 16, 16, 16, 16, 16, 16, 300, 196, 197, 26: 16, 29: 16},
		// 25
		{106, 106, 243, 5: 299, 298, 13: 239, 17: 106, 38: 242, 241},
		{34, 34, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 287, 286, 188, 186, 34, 22: 283, 196, 197, 184, 28: 285, 31: 284, 185, 48: 281, 282},
		{105, 105, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 264, 188, 186, 105, 194, 195, 263, 183, 193, 196, 197, 184, 28: 261, 31: 262, 185, 192, 191, 190, 260, 265},
		{104, 104, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 180, 188, 186, 104, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 40: 280},
		{104, 104, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 180, 188, 186, 104, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 40: 279},
		// 30
		{104, 104, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 180, 188, 186, 104, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 40: 278},
		{3: 268, 269, 43: 267, 45: 276},
		{3: 268, 269, 43: 267, 45: 274},
		{104, 104, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 180, 188, 186, 104, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 40: 259},
		{63, 63, 189, 201, 202, 235, 219, 234, 199, 200, 216, 215, 198, 239, 17, 17, 17, 17, 17, 17, 17, 17, 238, 196, 197, 26: 17, 29: 17, 38: 236, 237, 70: 233},
		// 35
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 232, 196, 197},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 230, 51, 51, 186, 51, 51, 51, 51, 51, 25: 184, 31: 231, 185},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 230, 50, 50, 186, 50, 50, 50, 50, 50, 25: 184, 31: 229, 185},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 228, 196, 197},
		{2: 227, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 226, 196, 197},
		// 40
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 20, 20, 20, 20, 26: 20, 33, 29: 20},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 26: 221},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 26: 30, 29: 224, 30},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 26: 28, 29: 28, 28},
		// 45
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26: 26, 29: 26, 26},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 18: 194, 195, 22: 193, 196, 197, 33: 192, 191, 220},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 18: 194, 195, 22: 193, 196, 197, 33: 213},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26: 23, 23, 29: 23, 23},
		{22, 22, 203, 211, 212, 208, 209, 207, 204, 210, 206, 205, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 26: 22, 22, 29: 22, 22},
		// 50
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 26: 21, 21, 29: 21, 21},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 26: 19, 19, 29: 19, 19},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 26: 13, 13, 29: 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 26: 12, 12, 29: 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 26: 11, 11, 29: 11, 11},
		// 55
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 26: 10, 10, 29: 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 26: 9, 9, 29: 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 26: 8, 8, 29: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 26: 7, 7, 29: 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 26: 6, 6, 29: 6, 6},
		// 60
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 26: 5, 5, 29: 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 26: 4, 4, 29: 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 26: 3, 3, 29: 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 26: 2, 2, 29: 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 26: 1, 1, 29: 1, 1},
		// 65
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 26: 24, 29: 24, 24},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 26: 20, 20, 29: 20, 20},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 26: 18, 18, 29: 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 26: 17, 17, 29: 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 26: 16, 16, 29: 16, 16},
		// 70
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 26: 15, 15, 29: 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 26: 14, 14, 29: 14, 14},
		{26: 221, 30: 222},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 18: 194, 195, 22: 193, 196, 197, 33: 192, 191, 223},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26: 25, 29: 25, 25},
		// 75
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26: 29, 30: 29},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 18: 194, 195, 22: 193, 196, 197, 33: 192, 225},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26: 27, 29: 27, 27},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 20, 20, 20, 20},
		// 80
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 226, 196, 197},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 85
		{68, 68},
		{16, 16, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 257, 196, 197},
		{15, 15, 243, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13: 239, 38: 242, 256},
		{34, 34, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 244, 22: 248, 196, 197, 27: 250, 44: 249, 51: 246, 247},
		{62, 62, 243, 13: 239, 38: 242, 241},
		// 90
		{61, 61},
		{2: 240},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 17: 32, 27: 32},
		{36, 36, 243, 5: 36, 36, 13: 239, 17: 36, 38: 242, 241},
		{34, 34, 34, 5: 34, 34, 13: 244, 17: 34},
		// 95
		{33, 33, 33, 5: 33, 33, 13: 33, 17: 33},
		{2: 243, 13: 239, 38: 245},
		{35, 35, 35, 5: 35, 35, 13: 35, 17: 35},
		{64, 64, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 253, 196, 197, 27: 250, 44: 254},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 27: 60},
		// 100
		{55, 55, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 248, 196, 197, 27: 250, 44: 249, 51: 255, 247},
		{54, 54, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 248, 196, 197, 27: 250, 44: 249, 51: 252, 247},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 251, 196, 197},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 27: 37},
		{57, 57, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 253, 196, 197, 27: 250, 44: 254},
		// 105
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 27: 58},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 27: 56},
		{59, 59, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 253, 196, 197, 27: 250, 44: 254},
		{65, 65, 243, 13: 239, 38: 242, 241},
		{67, 67, 27: 250, 44: 258},
		// 110
		{66, 66},
		{93, 93, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 264, 188, 186, 93, 194, 195, 263, 183, 193, 196, 197, 184, 28: 261, 31: 262, 185, 192, 191, 190, 260, 265},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		// 115
		{3: 268, 269, 43: 267, 45: 273},
		{3: 268, 269, 43: 267, 45: 266},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 271, 43, 43, 43, 43, 43, 43, 43, 43},
		// 120
		{41, 41, 41, 41, 270, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{3: 268, 269, 43: 272},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 125
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{104, 104, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 180, 188, 186, 104, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 40: 275},
		{95, 95, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 264, 188, 186, 95, 194, 195, 263, 183, 193, 196, 197, 184, 28: 261, 31: 262, 185, 192, 191, 190, 260, 265},
		{104, 104, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 180, 188, 186, 104, 194, 195, 179, 183, 193, 196, 197, 184, 28: 177, 31: 178, 185, 192, 191, 190, 176, 181, 40: 277},
		{97, 97, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 264, 188, 186, 97, 194, 195, 263, 183, 193, 196, 197, 184, 28: 261, 31: 262, 185, 192, 191, 190, 260, 265},
		// 130
		{99, 99, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 264, 188, 186, 99, 194, 195, 263, 183, 193, 196, 197, 184, 28: 261, 31: 262, 185, 192, 191, 190, 260, 265},
		{101, 101, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 264, 188, 186, 101, 194, 195, 263, 183, 193, 196, 197, 184, 28: 261, 31: 262, 185, 192, 191, 190, 260, 265},
		{103, 103, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 264, 188, 186, 103, 194, 195, 263, 183, 193, 196, 197, 184, 28: 261, 31: 262, 185, 192, 191, 190, 260, 265},
		{108, 108, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 293, 188, 186, 22: 290, 196, 197, 184, 28: 292, 31: 291, 185},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		// 135
		{72, 72, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 286, 188, 186, 22: 283, 196, 197, 184, 28: 285, 31: 284, 185, 48: 297, 282},
		{71, 71, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 286, 188, 186, 22: 283, 196, 197, 184, 28: 285, 31: 284, 185, 48: 296, 282},
		{70, 70, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 286, 188, 186, 22: 283, 196, 197, 184, 28: 285, 31: 284, 185, 48: 295, 282},
		{3: 268, 269, 43: 288},
		{2: 189, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 239, 22: 226, 196, 197, 38: 245},
		// 140
		{69, 69, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 286, 188, 186, 22: 283, 196, 197, 184, 28: 285, 31: 284, 185, 48: 289, 282},
		{73, 73, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 293, 188, 186, 22: 290, 196, 197, 184, 28: 292, 31: 291, 185},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		// 145
		{3: 268, 269, 43: 294},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{75, 75, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 293, 188, 186, 22: 290, 196, 197, 184, 28: 292, 31: 291, 185},
		{78, 78, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 293, 188, 186, 22: 290, 196, 197, 184, 28: 292, 31: 291, 185},
		{80, 80, 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 230, 293, 188, 186, 22: 290, 196, 197, 184, 28: 292, 31: 291, 185},
		// 150
		{111},
		{109, 109},
		{88, 88, 14: 304, 188, 186, 25: 305, 28: 303, 42: 302, 50: 301},
		{115, 115, 14: 311, 188, 186, 25: 305, 28: 310, 42: 309},
		{88, 88, 14: 304, 188, 186, 25: 305, 28: 303, 42: 302, 50: 314},
		// 155
		{88, 88, 14: 304, 188, 186, 25: 305, 28: 303, 42: 302, 50: 313},
		{3: 268, 269, 43: 267, 45: 307},
		{47, 47, 14: 47, 47, 186, 25: 305, 42: 306},
		{46, 46, 14: 46, 46, 46},
		{88, 88, 14: 304, 188, 186, 25: 305, 28: 303, 42: 302, 50: 308},
		// 160
		{82, 82, 14: 311, 188, 186, 25: 305, 28: 310, 42: 309},
		{86, 86, 14: 86, 86, 86},
		{85, 85, 14: 85, 85, 85},
		{3: 268, 269, 43: 267, 45: 312},
		{83, 83, 14: 83, 83, 83},
		// 165
		{84, 84, 14: 311, 188, 186, 25: 305, 28: 310, 42: 309},
		{87, 87, 14: 311, 188, 186, 25: 305, 28: 310, 42: 309},
		{91, 91, 17: 319, 41: 318, 47: 317},
		{110, 110, 243, 13: 239, 17: 106, 38: 242, 241},
		{116, 116, 17: 319, 41: 322},
		// 170
		{91, 91, 17: 319, 41: 318, 47: 321},
		{2: 214, 201, 202, 218, 219, 217, 199, 200, 216, 215, 198, 22: 320, 196, 197},
		{53, 53, 17: 53},
		{90, 90, 17: 319, 41: 322},
		{89, 89, 17: 89},
		// 175
		{91, 91, 17: 319, 41: 318, 47: 325},
		{112, 106, 243, 13: 239, 17: 106, 38: 242, 241},
		{117, 117, 17: 319, 41: 322},
		{91, 91, 17: 319, 41: 318, 47: 328},
		{106, 106, 243, 13: 239, 17: 106, 38: 242, 241},
		// 180
		{118, 118, 17: 319, 41: 322},
		{119, 119, 17: 319, 41: 322},
		{120},
		{122},
		{124},
		// 185
		{125},
		{126},
		{127},
		{128},
		{129},
		// 190
		{130},
		{131},
		{146},
		{141},
		{140},
		// 195
		{139},
		{138},
		{136},
		{135},
		{134},
		// 200
		{133},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 73

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			ast.Result = ast.NewRootNode(ast.CMDUI, nil)
		}
	case 2:
		{
			ast.Result = ast.NewRootNode(ast.CMDExplain, yyS[yypt-0].stmt)
		}
	case 3:
		{
			ast.Result = ast.NewRootNode(ast.CMDStmt, yyS[yypt-0].stmt)
		}
	case 4:
		{
			ast.Result = ast.NewRootNode(ast.CMDHelp, nil)
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].taskListNode
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].taskAddNode
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].taskDeleteNode
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].taskUpdateNode
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].taskDoneNode
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].tagListNode
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].tagAddNode
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].tagDeleteNode
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].tagUpdateNode
		}
	case 29:
		{
			yyVAL.taskListNode = ast.NewTaskListNode(model.TaskAll, yyS[yypt-1].taskListFilterNode, yyS[yypt-0].taskListOptionNode)
		}
	case 30:
		{
			yyVAL.taskListNode = ast.NewTaskListNode(model.TaskTodo, yyS[yypt-1].taskListFilterNode, yyS[yypt-0].taskListOptionNode)
		}
	case 31:
		{
			yyVAL.taskListNode = ast.NewTaskListNode(model.TaskDone, yyS[yypt-1].taskListFilterNode, yyS[yypt-0].taskListOptionNode)
		}
	case 32:
		{
			yyVAL.taskListNode = ast.NewTaskListNode(model.TaskDeleted, yyS[yypt-1].taskListFilterNode, yyS[yypt-0].taskListOptionNode)
		}
	case 33:
		{
			yyVAL.taskAddNode = ast.NewTaskAddNode(yyS[yypt-1].str, yyS[yypt-0].taskAddOptionNode)
		}
	case 34:
		{
			yyVAL.taskTodoNode = ast.NewTaskTodoNode(yyS[yypt-1].idGroupNode)
		}
	case 35:
		{
			yyVAL.taskTodoNode = ast.NewTaskTodoNode(yyS[yypt-0].idGroupNode)
		}
	case 36:
		{
			yyVAL.taskDoneNode = ast.NewTaskDoneNode(yyS[yypt-0].idGroupNode)
		}
	case 37:
		{
			yyVAL.taskDoneNode = ast.NewTaskDoneNode(yyS[yypt-1].idGroupNode)
		}
	case 38:
		{
			yyVAL.taskDeleteNode = ast.NewTaskDeleteNode(yyS[yypt-0].idGroupNode)
		}
	case 39:
		{
			yyVAL.taskDeleteNode = ast.NewTaskDeleteNode(yyS[yypt-1].idGroupNode)
		}
	case 40:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-1].num, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 41:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(nil, nil)
		}
	case 42:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(yyS[yypt-0].idGroupNode, nil)
		}
	case 43:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(nil, yyS[yypt-0].indefiniteTaskListFilterNode)
		}
	case 44:
		{
			yyVAL.indefiniteTaskListFilterNode = ast.NewIndefiniteTaskListFilterNode()
		}
	case 45:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetContentGroup(yyS[yypt-1].contentGroupNode)
		}
	case 46:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.SetContentGroup(yyS[yypt-0].contentGroupNode)
		}
	case 47:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetImportance(yyS[yypt-1].num)
		}
	case 48:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.SetImportance(yyS[yypt-0].num)
		}
	case 49:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.MergeAssignGroup(yyS[yypt-1].assignGroupNode)
		}
	case 50:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.MergeAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 51:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetAge(yyS[yypt-1].timeFilterNode)
		}
	case 52:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-2].indefiniteTaskListFilterNode.SetAge(yyS[yypt-0].timeFilterNode)
		}
	case 53:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetDue(yyS[yypt-1].timeFilterNode)
		}
	case 54:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-2].indefiniteTaskListFilterNode.SetDue(yyS[yypt-0].timeFilterNode)
		}
	case 55:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode.SetProject(yyS[yypt-1].str)
		}
	case 56:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode.SetProject(yyS[yypt-0].str)
		}
	case 57:
		{
			yyVAL.taskListOptionNode = ast.NewTaskListOptionNode()
		}
	case 58:
		{
			yyVAL.taskListOptionNode = yyS[yypt-0].taskListOptionNode.SetSortMetric(yyS[yypt-1].str)
		}
	case 59:
		{
			yyVAL.taskListOptionNode = yyS[yypt-1].taskListOptionNode.SetSortMetric(yyS[yypt-0].str)
		}
	case 60:
		{
			yyVAL.taskAddOptionNode = ast.NewTaskAddOptionNode()
		}
	case 61:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-0].taskAddOptionNode.SetAssignGroup(yyS[yypt-1].assignGroupNode)
		}
	case 62:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-1].taskAddOptionNode.SetAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 63:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-1].taskAddOptionNode.SetImportance(yyS[yypt-0].num)
		}
	case 64:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-0].taskAddOptionNode.SetImportance(yyS[yypt-1].num)
		}
	case 65:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-2].taskAddOptionNode.SetDue(yyS[yypt-0].timeFilterNode)
		}
	case 66:
		{
			yyVAL.taskAddOptionNode = yyS[yypt-0].taskAddOptionNode.SetDue(yyS[yypt-1].timeFilterNode)
		}
	case 67:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode
		}
	case 68:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetContent(yyS[yypt-1].str)
		}
	case 69:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-1].taskUpdateOptionNode.SetContent(yyS[yypt-0].str)
		}
	case 70:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetAssignGroup(yyS[yypt-1].assignGroupNode)
		}
	case 71:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-1].taskUpdateOptionNode.SetAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 72:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-1].taskUpdateOptionNode.SetImportance(yyS[yypt-0].num)
		}
	case 73:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetImportance(yyS[yypt-1].num)
		}
	case 74:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-2].taskUpdateOptionNode.SetDue(yyS[yypt-0].timeNode)
		}
	case 75:
		{
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode.SetDue(yyS[yypt-1].timeNode)
		}
	case 76:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetContent(yyS[yypt-0].str)
		}
	case 77:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetAssignGroup(yyS[yypt-0].assignGroupNode)
		}
	case 78:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetImportance(yyS[yypt-0].num)
		}
	case 79:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode().SetDue(yyS[yypt-0].timeNode)
		}
	case 80:
		{
			yyVAL.tagListNode = ast.NewTagListNode(yyS[yypt-0].tagListFilterNode)
		}
	case 81:
		{
			yyVAL.tagAddNode = ast.NewTagAddNode(yyS[yypt-0].str, "")
		}
	case 82:
		{
			yyVAL.tagAddNode = ast.NewTagAddNode(yyS[yypt-1].str, yyS[yypt-0].str)
		}
	case 83:
		{
			yyVAL.tagDeleteNode = ast.NewTagDeleteNode(yyS[yypt-0].idGroupNode)
		}
	case 84:
		{
			yyVAL.tagUpdateNode = ast.NewTagUpdateNode(yyS[yypt-1].num, yyS[yypt-0].tagUpdateOptionNode)
		}
	case 85:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(nil, "")
		}
	case 86:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(yyS[yypt-0].idGroupNode, "")
		}
	case 87:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(nil, yyS[yypt-0].str)
		}
	case 88:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-0].tagUpdateOptionNode
		}
	case 89:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-0].tagUpdateOptionNode.SetContent(yyS[yypt-1].str)
		}
	case 90:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-1].tagUpdateOptionNode.SetContent(yyS[yypt-0].str)
		}
	case 91:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-0].tagUpdateOptionNode.SetColor(yyS[yypt-1].str)
		}
	case 92:
		{
			yyVAL.tagUpdateOptionNode = yyS[yypt-1].tagUpdateOptionNode.SetColor(yyS[yypt-0].str)
		}
	case 93:
		{
			yyVAL.tagUpdateOptionNode = ast.NewTagUpdateOptionNode().SetContent(yyS[yypt-0].str)
		}
	case 94:
		{
			yyVAL.tagUpdateOptionNode = ast.NewTagUpdateOptionNode().SetColor(yyS[yypt-0].str)
		}
	case 95:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 96:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 97:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode(yyS[yypt-0].str, "")
		}
	case 98:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode("", yyS[yypt-0].str)
		}
	case 99:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode.AssignTag(yyS[yypt-1].str)
		}
	case 100:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode.UnassignTag(yyS[yypt-1].str)
		}
	case 101:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode(yyS[yypt-0].str, "")
		}
	case 102:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode.AssignTag(yyS[yypt-1].str)
		}
	case 103:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 104:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 105:
		{
			yyVAL.timeFilterNode = ast.NewTimeFilterNode(yyS[yypt-0].timeNode, nil)
		}
	case 106:
		{
			yyVAL.timeFilterNode = ast.NewTimeFilterNode(yyS[yypt-2].timeNode, yyS[yypt-0].timeNode)
		}
	case 107:
		{
			yyVAL.timeNode = ast.NewTimeNode(yyS[yypt-0].str, ast.TimeFormatDate)
		}
	case 108:
		{
			yyVAL.timeNode = ast.NewTimeNode(yyS[yypt-0].str, ast.TimeFormatTime)
		}
	case 109:
		{
			yyVAL.timeNode = ast.NewTimeNode(yyS[yypt-1].str+" "+yyS[yypt-0].str, ast.TimeFormatDateTime)
		}
	case 110:
		{
			yyVAL.num, _ = strconv.Atoi(yyS[yypt-0].str)
		}
	case 111:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 112:
		{
			yyVAL.idGroupNode = yyS[yypt-1].idGroupNode.MergeIDNode(yyS[yypt-0].idGroupNode)
		}
	case 113:
		{
			yyVAL.idGroupNode = ast.NewIDGroupNode(yyS[yypt-2].num, yyS[yypt-0].num)
		}
	case 114:
		{
			yyVAL.idGroupNode = ast.NewIDGroupNode(yyS[yypt-0].num)
		}
	case 115:
		{
			yyVAL.num, _ = strconv.Atoi(yyS[yypt-0].str)
		}
	case 116:
		{
			yyVAL.num, _ = strconv.Atoi("-" + yyS[yypt-0].str)
		}
	case 117:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 118:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 119:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPAND, []*ast.ContentGroupNode{yyS[yypt-2].contentGroupNode, yyS[yypt-0].contentGroupNode})
		}
	case 120:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 121:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPOR, []*ast.ContentGroupNode{yyS[yypt-2].contentGroupNode, yyS[yypt-0].contentGroupNode})
		}
	case 122:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode(yyS[yypt-0].str, ast.OPNone, []*ast.ContentGroupNode{})
		}
	case 123:
		{
			yyVAL.contentGroupNode = yyS[yypt-1].contentGroupNode
		}
	case 124:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPNOT, []*ast.ContentGroupNode{yyS[yypt-0].contentGroupNode})
		}
	case 125:
		{
			var err error
			yyVAL.str, err = utils.DecodeCmd(yyS[yypt-0].str)
			if err != nil {
				ast.ErrorList = append(ast.ErrorList, errors.New("Illegal character in CMD"))
			}
		}
	case 126:
		{
			var err error
			yyVAL.str, err = utils.DecodeCmd(strings.Trim(yyS[yypt-0].str, " "))
			if err != nil {
				ast.ErrorList = append(ast.ErrorList, errors.New("Illegal character in CMD"))
			}
		}
	case 127:
		{
			yyVAL.str = ast.SearchVarMap(yyS[yypt-0].str)
		}
	case 128:
		{
			yyVAL.str = fmt.Sprint(yyS[yypt-0].str)
		}
	case 129:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 130:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 131:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 132:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 133:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 134:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 135:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 136:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 137:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 138:
		{
			yyVAL.str = yyS[yypt-1].str + " " + fmt.Sprint(yyS[yypt-0].str)
		}
	case 139:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 140:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 141:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 142:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 143:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 144:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 145:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 146:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 147:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
