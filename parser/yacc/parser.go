// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/SpicyChickenFLY/never-todo-cmd/parser/ast"
	"strconv"
)

type yySymType struct {
	yys  int
	str  string
	num  int
	root ast.Node
	stmt ast.StmtNode

	taskListNode                 ast.TaskListNode
	taskListFilterNode           *ast.TaskListFilterNode
	indefiniteTaskListFilterNode *ast.IndefiniteTaskListFilterNode
	taskAddNode                  ast.TaskAddNode
	taskDeleteNode               ast.TaskDeleteNode
	taskDoneNode                 ast.TaskDoneNode
	taskUpdateNode               ast.TaskUpdateNode
	taskUpdateOptionNode         *ast.TaskUpdateOptionNode

	tagListNode       ast.TagListNode
	tagListFilterNode *ast.TagListFilterNode

	idGroupNode      *ast.IDGroupNode
	contentGroupNode *ast.ContentGroupNode
	assignGroupNode  *ast.AssignGroupNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57376
	yyEofCode = 57344
	ADD       = 57367
	AGE       = 57371
	AND       = 57357
	COLON     = 57351
	DELETE    = 57368
	DONE      = 57370
	DQUOTE    = 57353
	DUE       = 57372
	EXPLAIN   = 57362
	GUI       = 57361
	HELP      = 57375
	IDENT     = 57347
	LBRACK    = 57354
	LIKE      = 57373
	LOG       = 57363
	LOOP      = 57374
	MINUS     = 57350
	NOT       = 57356
	NUM       = 57346
	OR        = 57358
	PLUS      = 57349
	QUOTE     = 57352
	RBRACK    = 57355
	SET       = 57369
	TAG       = 57366
	TASK      = 57365
	UI        = 57360
	UNDO      = 57364
	WHITE     = 57348
	XOR       = 57359
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -127
)

var (
	yyPrec = map[int]int{
		PLUS:  0,
		MINUS: 0,
		AND:   1,
		OR:    1,
		XOR:   2,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (158x)
		57375: 1,  // HELP (123x)
		57349: 2,  // PLUS (95x)
		57350: 3,  // MINUS (94x)
		57346: 4,  // NUM (85x)
		57371: 5,  // AGE (83x)
		57372: 6,  // DUE (83x)
		57353: 7,  // DQUOTE (78x)
		57358: 8,  // OR (78x)
		57352: 9,  // QUOTE (78x)
		57357: 10, // AND (77x)
		57368: 11, // DELETE (70x)
		57370: 12, // DONE (70x)
		57356: 13, // NOT (69x)
		57351: 14, // COLON (67x)
		57369: 15, // SET (67x)
		57367: 16, // ADD (64x)
		57373: 17, // LIKE (64x)
		57374: 18, // LOOP (64x)
		57366: 19, // TAG (64x)
		57365: 20, // TASK (64x)
		57359: 21, // XOR (64x)
		57347: 22, // IDENT (39x)
		57354: 23, // LBRACK (37x)
		57384: 24, // definite_content (25x)
		57386: 25, // id (21x)
		57378: 26, // assign_tag (19x)
		57387: 27, // id_group (16x)
		57377: 28, // assign_group (15x)
		57414: 29, // unassign_tag (15x)
		57381: 30, // content_logic_p1 (14x)
		57355: 31, // RBRACK (14x)
		57396: 32, // shard_content (14x)
		57382: 33, // content_logic_p2 (13x)
		57388: 34, // indefinite_content (13x)
		57383: 35, // content_logic_p3 (11x)
		57380: 36, // content_group (9x)
		57390: 37, // itlf_p1 (7x)
		57410: 38, // task_update_option (7x)
		57391: 39, // itlf_p2 (6x)
		57379: 40, // content_filter (5x)
		57392: 41, // itlf_p3 (5x)
		57389: 42, // indefinite_task_list_filter (4x)
		57394: 43, // positive_assign_group (4x)
		57408: 44, // task_list_filter (4x)
		57413: 45, // time_single (4x)
		57403: 46, // task_add_option (3x)
		57411: 47, // time_list_filter (3x)
		57412: 48, // time_range (3x)
		57363: 49, // LOG (2x)
		57393: 50, // log_list (2x)
		57397: 51, // stmt (2x)
		57399: 52, // tag_list (2x)
		57400: 53, // tag_list_filter (2x)
		57401: 54, // tag_set (2x)
		57402: 55, // task_add (2x)
		57404: 56, // task_delete (2x)
		57405: 57, // task_done (2x)
		57407: 58, // task_list (2x)
		57409: 59, // task_update (2x)
		57364: 60, // UNDO (2x)
		57415: 61, // undo_log (2x)
		57362: 62, // EXPLAIN (1x)
		57361: 63, // GUI (1x)
		57385: 64, // help (1x)
		57395: 65, // root (1x)
		57398: 66, // tag_help (1x)
		57406: 67, // task_help (1x)
		57360: 68, // UI (1x)
		57376: 69, // $default (0x)
		57345: 70, // error (0x)
		57348: 71, // WHITE (0x)
	}

	yySymNames = []string{
		"$end",
		"HELP",
		"PLUS",
		"MINUS",
		"NUM",
		"AGE",
		"DUE",
		"DQUOTE",
		"OR",
		"QUOTE",
		"AND",
		"DELETE",
		"DONE",
		"NOT",
		"COLON",
		"SET",
		"ADD",
		"LIKE",
		"LOOP",
		"TAG",
		"TASK",
		"XOR",
		"IDENT",
		"LBRACK",
		"definite_content",
		"id",
		"assign_tag",
		"id_group",
		"assign_group",
		"unassign_tag",
		"content_logic_p1",
		"RBRACK",
		"shard_content",
		"content_logic_p2",
		"indefinite_content",
		"content_logic_p3",
		"content_group",
		"itlf_p1",
		"task_update_option",
		"itlf_p2",
		"content_filter",
		"itlf_p3",
		"indefinite_task_list_filter",
		"positive_assign_group",
		"task_list_filter",
		"time_single",
		"task_add_option",
		"time_list_filter",
		"time_range",
		"LOG",
		"log_list",
		"stmt",
		"tag_list",
		"tag_list_filter",
		"tag_set",
		"task_add",
		"task_delete",
		"task_done",
		"task_list",
		"task_update",
		"UNDO",
		"undo_log",
		"EXPLAIN",
		"GUI",
		"help",
		"root",
		"tag_help",
		"task_help",
		"UI",
		"$default",
		"error",
		"WHITE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {65, 0},
		2:   {65, 1},
		3:   {65, 1},
		4:   {65, 2},
		5:   {65, 1},
		6:   {65, 1},
		7:   {51, 1},
		8:   {51, 1},
		9:   {51, 1},
		10:  {51, 1},
		11:  {51, 1},
		12:  {51, 1},
		13:  {51, 1},
		14:  {51, 1},
		15:  {51, 1},
		16:  {64, 1},
		17:  {64, 1},
		18:  {64, 1},
		19:  {67, 2},
		20:  {67, 2},
		21:  {67, 2},
		22:  {67, 2},
		23:  {67, 2},
		24:  {66, 2},
		25:  {66, 2},
		26:  {66, 2},
		27:  {50, 1},
		28:  {50, 2},
		29:  {61, 1},
		30:  {61, 2},
		31:  {58, 2},
		32:  {58, 1},
		33:  {55, 3},
		34:  {55, 2},
		35:  {55, 4},
		36:  {55, 3},
		37:  {57, 2},
		38:  {57, 2},
		39:  {56, 3},
		40:  {56, 2},
		41:  {56, 2},
		42:  {59, 5},
		43:  {59, 4},
		44:  {59, 5},
		45:  {59, 4},
		46:  {59, 4},
		47:  {59, 3},
		48:  {44, 0},
		49:  {44, 1},
		50:  {44, 1},
		51:  {42, 1},
		52:  {42, 2},
		53:  {42, 2},
		54:  {40, 2},
		55:  {40, 1},
		56:  {41, 1},
		57:  {41, 2},
		58:  {41, 2},
		59:  {39, 1},
		60:  {39, 4},
		61:  {39, 4},
		62:  {37, 0},
		63:  {37, 3},
		64:  {46, 0},
		65:  {46, 2},
		66:  {38, 0},
		67:  {38, 2},
		68:  {52, 2},
		69:  {54, 4},
		70:  {53, 0},
		71:  {53, 1},
		72:  {53, 2},
		73:  {53, 1},
		74:  {27, 2},
		75:  {27, 3},
		76:  {27, 1},
		77:  {25, 1},
		78:  {36, 1},
		79:  {36, 2},
		80:  {36, 1},
		81:  {35, 1},
		82:  {35, 3},
		83:  {33, 1},
		84:  {33, 3},
		85:  {30, 1},
		86:  {30, 3},
		87:  {30, 2},
		88:  {24, 3},
		89:  {24, 3},
		90:  {24, 3},
		91:  {24, 3},
		92:  {24, 3},
		93:  {24, 3},
		94:  {34, 1},
		95:  {34, 2},
		96:  {34, 2},
		97:  {34, 2},
		98:  {34, 2},
		99:  {34, 2},
		100: {34, 2},
		101: {34, 2},
		102: {34, 2},
		103: {34, 2},
		104: {34, 2},
		105: {34, 2},
		106: {34, 2},
		107: {34, 2},
		108: {34, 2},
		109: {34, 2},
		110: {34, 2},
		111: {34, 2},
		112: {34, 2},
		113: {32, 0},
		114: {32, 2},
		115: {28, 0},
		116: {28, 2},
		117: {28, 2},
		118: {43, 0},
		119: {43, 2},
		120: {26, 2},
		121: {29, 2},
		122: {47, 1},
		123: {47, 1},
		124: {45, 1},
		125: {45, 0},
		126: {48, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [189][]uint16{
		// 0
		{126, 143, 181, 182, 167, 165, 166, 175, 65, 176, 65, 154, 152, 169, 65, 155, 151, 160, 65, 147, 146, 65, 178, 174, 173, 156, 179, 153, 163, 180, 172, 32: 177, 171, 170, 168, 161, 164, 39: 162, 159, 158, 157, 44: 150, 49: 148, 134, 132, 141, 54: 142, 137, 138, 140, 136, 139, 149, 135, 131, 130, 133, 128, 145, 144, 129},
		{127},
		{125},
		{124},
		{79, 2: 181, 182, 167, 165, 166, 175, 65, 176, 65, 154, 152, 169, 65, 155, 151, 160, 65, 315, 314, 65, 178, 174, 173, 156, 179, 153, 163, 180, 172, 32: 177, 171, 170, 168, 161, 164, 39: 162, 159, 158, 157, 44: 150, 49: 148, 134, 307, 312, 54: 313, 309, 310, 140, 308, 311, 149, 135},
		// 5
		{122},
		{121},
		{120},
		{119},
		{118, 306},
		// 10
		{117, 305},
		{116, 304},
		{115, 303},
		{114},
		{113, 302},
		// 15
		{112, 301},
		{111},
		{110},
		{109},
		{79, 282, 181, 182, 167, 165, 166, 175, 65, 176, 65, 285, 65, 169, 65, 286, 284, 160, 65, 65, 65, 65, 178, 174, 173, 287, 179, 288, 163, 180, 172, 32: 177, 171, 170, 168, 161, 164, 39: 162, 159, 158, 157, 44: 283},
		// 20
		{57, 273, 14, 14, 167, 14, 14, 175, 14, 176, 14, 14, 14, 169, 14, 275, 14, 277, 14, 14, 14, 14, 178, 174, 173, 259, 27: 276, 30: 172, 32: 177, 171, 170, 168, 278, 53: 274},
		{100, 4: 272},
		{98, 4: 167, 25: 271},
		{95, 95},
		{14, 14, 14, 14, 14, 14, 14, 175, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 24: 265, 32: 177, 34: 264},
		// 25
		{4: 167, 25: 259, 27: 263},
		{78, 78, 4: 167, 11: 262, 261, 25: 259, 27: 260},
		{4: 167, 25: 259, 27: 258},
		{4: 167, 25: 255},
		{51, 51, 3: 248, 51, 7: 175, 9: 176, 11: 51, 51, 15: 246, 24: 247},
		// 30
		{77, 77},
		{76, 76, 14, 14, 14, 14, 14, 175, 14, 176, 14, 14, 14, 169, 14, 14, 14, 160, 14, 14, 14, 14, 178, 174, 173, 30: 172, 32: 177, 171, 170, 168, 161, 40: 245},
		{65, 65, 181, 182, 5: 165, 166, 26: 179, 28: 163, 180, 37: 164, 39: 162, 41: 244},
		{14, 14, 14, 14, 14, 14, 14, 175, 14, 176, 14, 14, 14, 169, 14, 14, 14, 14, 14, 14, 14, 14, 178, 174, 173, 30: 172, 32: 177, 171, 170, 168, 243},
		{72, 72, 72, 72, 5: 72, 72},
		// 35
		{71, 71, 181, 182, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 26: 179, 28: 242, 180},
		{65, 65, 65, 65, 65, 165, 166, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 37: 164, 39: 241},
		{68, 68, 68, 68, 68, 238, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{14: 235},
		{14: 228},
		// 40
		{50, 50, 3: 50, 50, 7: 50, 9: 50, 11: 50, 50, 15: 50},
		{49, 49, 49, 49, 5: 49, 49},
		{7: 175, 9: 176, 13: 219, 23: 174, 173, 30: 227, 33: 171, 35: 226},
		{47, 47, 203, 204, 209, 198, 199, 8: 206, 10: 205, 195, 197, 208, 202, 196, 194, 200, 201, 193, 192, 207},
		{46, 46, 46, 46, 5: 46, 46, 8: 223, 10: 222, 31: 46},
		// 45
		{44, 44, 44, 44, 5: 44, 44, 8: 44, 10: 44, 31: 44},
		{42, 42, 42, 42, 5: 42, 42, 8: 42, 10: 42, 31: 42},
		{7: 175, 9: 176, 13: 219, 23: 174, 173, 30: 172, 33: 171, 35: 218},
		{2: 14, 14, 14, 14, 14, 175, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 24: 213, 32: 212, 34: 214},
		{2: 14, 14, 14, 14, 14, 175, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 24: 189, 32: 188, 34: 190},
		// 50
		{33, 33, 33, 33, 33, 33, 33, 8: 33, 10: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 32: 187},
		{12, 12, 181, 182, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 26: 179, 28: 186, 180},
		{12, 12, 181, 182, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 26: 179, 28: 185, 180},
		{22: 184},
		// 55
		{22: 183},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 60
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{2: 33, 33, 33, 33, 33, 8: 33, 211, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{9: 210},
		{2: 203, 204, 209, 198, 199, 8: 206, 191, 205, 195, 197, 208, 202, 196, 194, 200, 201, 193, 192, 207},
		{34, 34, 34, 34, 5: 34, 34, 34, 34, 34, 34, 31: 34},
		// 65
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 70
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 75
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		// 80
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{36, 36, 36, 36, 5: 36, 36, 36, 36, 36, 36, 31: 36},
		{38, 38, 38, 38, 5: 38, 38, 38, 38, 38, 38, 31: 38},
		// 85
		{2: 33, 33, 33, 33, 33, 217, 33, 10: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{7: 216},
		{2: 203, 204, 209, 198, 199, 215, 206, 10: 205, 195, 197, 208, 202, 196, 194, 200, 201, 193, 192, 207},
		{35, 35, 35, 35, 5: 35, 35, 35, 35, 35, 35, 31: 35},
		{37, 37, 37, 37, 5: 37, 37, 37, 37, 37, 37, 31: 37},
		// 90
		{39, 39, 39, 39, 5: 39, 39, 39, 39, 39, 39, 31: 39},
		{31: 221},
		{7: 175, 9: 176, 13: 219, 23: 174, 173, 30: 220},
		{40, 40, 40, 40, 5: 40, 40, 8: 40, 10: 40, 31: 40},
		{41, 41, 41, 41, 5: 41, 41, 8: 41, 10: 41, 31: 41},
		// 95
		{7: 175, 9: 176, 13: 219, 23: 174, 173, 30: 172, 33: 225},
		{7: 175, 9: 176, 13: 219, 23: 174, 173, 30: 172, 33: 224},
		{43, 43, 43, 43, 5: 43, 43, 8: 43, 10: 43, 31: 43},
		{45, 45, 45, 45, 5: 45, 45, 8: 223, 31: 45},
		{48, 48, 48, 48, 5: 48, 48},
		// 100
		{44, 44, 44, 44, 5: 44, 44, 8: 44, 10: 44},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 232, 2, 45: 230, 47: 229, 231},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{5, 5, 5, 233, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		// 105
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 232, 2, 45: 234},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 232, 2, 45: 230, 47: 236, 231},
		{65, 65, 65, 65, 65, 65, 166, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 37: 237},
		// 110
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{14: 239},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 232, 2, 45: 230, 47: 240, 231},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		// 115
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{73, 73, 73, 73, 5: 73, 73},
		{75, 75},
		{74, 74},
		{7: 175, 9: 176, 24: 253},
		// 120
		{61, 61, 181, 182, 26: 179, 28: 251, 180, 38: 250},
		{4: 167, 25: 249},
		{52, 52, 4: 52, 11: 52, 52},
		{80, 80},
		{61, 61, 181, 182, 26: 179, 28: 251, 180, 38: 252},
		// 125
		{60, 60},
		{61, 61, 181, 182, 26: 179, 28: 251, 180, 38: 254},
		{82, 82},
		{7: 175, 9: 176, 24: 256},
		{61, 61, 181, 182, 26: 179, 28: 251, 180, 38: 257},
		// 130
		{84, 84},
		{87, 87, 4: 167, 25: 259, 27: 260},
		{51, 51, 3: 248, 51, 11: 51, 51},
		{53, 53, 4: 167, 11: 53, 53, 25: 259, 27: 260},
		{89},
		// 135
		{86, 86},
		{90, 4: 167, 25: 259, 27: 260},
		{93, 93, 203, 204, 209, 198, 199, 8: 206, 10: 205, 195, 197, 208, 202, 196, 194, 200, 201, 193, 192, 207},
		{63, 63, 181, 26: 268, 43: 267, 46: 266},
		{91, 91},
		// 140
		{63, 63, 181, 26: 268, 43: 267, 46: 270},
		{9, 9, 181, 26: 268, 43: 269},
		{8, 8, 8},
		{62, 62},
		{97},
		// 145
		{99},
		{103},
		{59, 59},
		{4: 167, 25: 280},
		{56, 56, 4: 167, 25: 259, 27: 260},
		// 150
		{14, 14, 14, 14, 14, 14, 14, 175, 14, 176, 14, 14, 14, 169, 14, 14, 14, 14, 14, 14, 14, 14, 178, 174, 173, 30: 172, 32: 177, 171, 170, 168, 279},
		{54, 54},
		{55, 55},
		{7: 175, 9: 176, 24: 281},
		{58, 58},
		// 155
		{108},
		{96, 96},
		{14, 14, 14, 14, 14, 14, 14, 175, 14, 176, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 178, 24: 299, 32: 177, 34: 298},
		{4: 167, 25: 259, 27: 297},
		{4: 167, 25: 294},
		// 160
		{51, 51, 3: 248, 51, 7: 175, 9: 176, 15: 289, 24: 290},
		{78, 78, 4: 167, 25: 259, 27: 260},
		{7: 175, 9: 176, 24: 292},
		{61, 61, 181, 182, 26: 179, 28: 251, 180, 38: 291},
		{81, 81},
		// 165
		{61, 61, 181, 182, 26: 179, 28: 251, 180, 38: 293},
		{83, 83},
		{7: 175, 9: 176, 24: 295},
		{61, 61, 181, 182, 26: 179, 28: 251, 180, 38: 296},
		{85, 85},
		// 170
		{88, 88, 4: 167, 25: 259, 27: 260},
		{94, 94, 203, 204, 209, 198, 199, 8: 206, 10: 205, 195, 197, 208, 202, 196, 194, 200, 201, 193, 192, 207},
		{63, 63, 181, 26: 268, 43: 267, 46: 300},
		{92, 92},
		{101},
		// 175
		{102},
		{104},
		{105},
		{106},
		{107},
		// 180
		{123},
		{118},
		{117},
		{116},
		{115},
		// 185
		{113},
		{112},
		{79, 2: 181, 182, 167, 165, 166, 175, 65, 176, 65, 285, 65, 169, 65, 286, 284, 160, 65, 65, 65, 65, 178, 174, 173, 287, 179, 288, 163, 180, 172, 32: 177, 171, 170, 168, 161, 164, 39: 162, 159, 158, 157, 44: 283},
		{57, 2: 14, 14, 167, 14, 14, 175, 14, 176, 14, 14, 14, 169, 14, 275, 14, 277, 14, 14, 14, 14, 178, 174, 173, 259, 27: 276, 30: 172, 32: 177, 171, 170, 168, 278, 53: 274},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 70

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			result = ast.NewRootNode(ast.CMDSummary, nil)
		}
	case 2:
		{
			result = ast.NewRootNode(ast.CMDUI, nil)
		}
	case 3:
		{
			result = ast.NewRootNode(ast.CMDGUI, nil)
		}
	case 4:
		{
			result = ast.NewRootNode(ast.CMDExplain, yyS[yypt-0].stmt)
		}
	case 5:
		{
			result = ast.NewRootNode(ast.CMDStmt, yyS[yypt-0].stmt)
		}
	case 6:
		{
			result = ast.NewRootNode(ast.CMDHelp, nil)
		}
	case 7:
		{
			if debug {
				fmt.Println("stmt_log_list")
			}
		}
	case 8:
		{
			if debug {
				fmt.Println("stmt_undo_log")
			}
		}
	case 9:
		{
			yyVAL.stmt = &yyS[yypt-0].taskListNode
		}
	case 10:
		{
			yyVAL.stmt = &yyS[yypt-0].taskAddNode
		}
	case 11:
		{
			yyVAL.stmt = &yyS[yypt-0].taskDeleteNode
		}
	case 12:
		{
			yyVAL.stmt = &yyS[yypt-0].taskUpdateNode
		}
	case 13:
		{
			yyVAL.stmt = &yyS[yypt-0].taskDoneNode
		}
	case 14:
		{
			yyVAL.stmt = &yyS[yypt-0].tagListNode
		}
	case 15:
		{
			if debug {
				fmt.Println("stmt_tag_set")
			}
		}
	case 24:
		{ /*if debug {fmt.Println("tag_help")}*/
		}
	case 25:
		{ /*if debug {fmt.Println("tag_help")}*/
		}
	case 26:
		{ /*if debug {fmt.Println("tag_help")}*/
		}
	case 27:
		{ /*if debug {fmt.Println("log")}*/
		}
	case 28:
		{ /*if debug {fmt.Println("log")}*/
		}
	case 29:
		{ /*if debug {fmt.Println("log")}*/
		}
	case 30:
		{ /*if debug {fmt.Println("log")}*/
		}
	case 31:
		{
			yyVAL.taskListNode = ast.NewTaskListNode(yyS[yypt-0].taskListFilterNode)
		}
	case 32:
		{
			yyVAL.taskListNode = ast.NewTaskListNode(yyS[yypt-0].taskListFilterNode)
		}
	case 33:
		{
			yyVAL.taskAddNode = ast.NewTaskAddNode(yyS[yypt-0].str)
		}
	case 34:
		{
			yyVAL.taskAddNode = ast.NewTaskAddNode(yyS[yypt-0].str)
		}
	case 35:
		{
			yyVAL.taskAddNode = ast.NewTaskAddNode(yyS[yypt-1].str)
		}
	case 36:
		{
			yyVAL.taskAddNode = ast.NewTaskAddNode(yyS[yypt-1].str)
		}
	case 37:
		{
			yyVAL.taskDoneNode = ast.NewTaskDoneNode(yyS[yypt-0].idGroupNode)
		}
	case 38:
		{
			yyVAL.taskDoneNode = ast.NewTaskDoneNode(yyS[yypt-1].idGroupNode)
		}
	case 39:
		{
			yyVAL.taskDeleteNode = ast.NewTaskDeleteNode(yyS[yypt-0].idGroupNode)
		}
	case 40:
		{
			yyVAL.taskDeleteNode = ast.NewTaskDeleteNode(yyS[yypt-0].idGroupNode)
		}
	case 41:
		{
			yyVAL.taskDeleteNode = ast.NewTaskDeleteNode(yyS[yypt-1].idGroupNode)
		}
	case 42:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-2].num, yyS[yypt-1].str, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 43:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-2].num, yyS[yypt-1].str, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 44:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-3].num, yyS[yypt-1].str, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 45:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-3].num, yyS[yypt-1].str, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 46:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-2].num, yyS[yypt-1].str, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 47:
		{
			yyVAL.taskUpdateNode = ast.NewTaskUpdateNode(yyS[yypt-2].num, yyS[yypt-1].str, yyS[yypt-0].taskUpdateOptionNode)
		}
	case 48:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(nil, nil)
		}
	case 49:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(yyS[yypt-0].idGroupNode, nil)
		}
	case 50:
		{
			yyVAL.taskListFilterNode = ast.NewTaskListFilterNode(nil, yyS[yypt-0].indefiniteTaskListFilterNode)
		}
	case 51:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode
		}
	case 52:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode
			yyVAL.indefiniteTaskListFilterNode.SetContentFilter(yyS[yypt-1].contentGroupNode)
		}
	case 53:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode
			yyVAL.indefiniteTaskListFilterNode.SetContentFilter(yyS[yypt-0].contentGroupNode)
		}
	case 54:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 55:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 56:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode
		}
	case 57:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode
			yyVAL.indefiniteTaskListFilterNode.SetAssignFilter(yyS[yypt-1].assignGroupNode)
		}
	case 58:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-1].indefiniteTaskListFilterNode
			yyVAL.indefiniteTaskListFilterNode.SetAssignFilter(yyS[yypt-0].assignGroupNode)
		}
	case 59:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode
		}
	case 60:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-0].indefiniteTaskListFilterNode
			yyVAL.indefiniteTaskListFilterNode.SetAgeFilter(yyS[yypt-1].str)
		}
	case 61:
		{
			yyVAL.indefiniteTaskListFilterNode = yyS[yypt-3].indefiniteTaskListFilterNode
			yyVAL.indefiniteTaskListFilterNode.SetAgeFilter(yyS[yypt-0].str)
		}
	case 62:
		{
			yyVAL.indefiniteTaskListFilterNode = ast.NewIndefiniteTaskListFilterNode()
		}
	case 63:
		{
			yyVAL.indefiniteTaskListFilterNode.SetDueFilter(yyS[yypt-0].str)
		}
	case 66:
		{
			yyVAL.taskUpdateOptionNode = ast.NewTaskUpdateOptionNode()
		}
	case 67:
		{
			yyS[yypt-0].taskUpdateOptionNode.AssignTag(yyS[yypt-1].assignGroupNode)
			yyVAL.taskUpdateOptionNode = yyS[yypt-0].taskUpdateOptionNode
		}
	case 68:
		{
			yyVAL.tagListNode = ast.NewTagListNode(yyS[yypt-0].tagListFilterNode)
		}
	case 70:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(nil, nil)
		}
	case 71:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(yyS[yypt-0].idGroupNode, nil)
		}
	case 72:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(nil, yyS[yypt-0].contentGroupNode)
		}
	case 73:
		{
			yyVAL.tagListFilterNode = ast.NewTagListFilterNode(nil, yyS[yypt-0].contentGroupNode)
		}
	case 74:
		{
			yyS[yypt-1].idGroupNode.MergeIDNode(yyS[yypt-0].idGroupNode)
			yyVAL.idGroupNode = yyS[yypt-1].idGroupNode
		}
	case 75:
		{
			yyVAL.idGroupNode = ast.NewIDGroupNode(yyS[yypt-2].num, yyS[yypt-0].num)
		}
	case 76:
		{
			yyVAL.idGroupNode = ast.NewIDGroupNode(yyS[yypt-0].num)
		}
	case 77:
		{
			val, err := strconv.Atoi(yyS[yypt-0].str)
			if err != nil {
				panic(err)
			}
			yyVAL.num = val
		}
	case 78:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 79:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPNOT, []*ast.ContentGroupNode{yyS[yypt-0].contentGroupNode})
		}
	case 80:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode(yyS[yypt-0].str, ast.OPNone, []*ast.ContentGroupNode{})
		}
	case 81:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 82:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPAND, []*ast.ContentGroupNode{yyS[yypt-2].contentGroupNode, yyS[yypt-0].contentGroupNode})
		}
	case 83:
		{
			yyVAL.contentGroupNode = yyS[yypt-0].contentGroupNode
		}
	case 84:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPOR, []*ast.ContentGroupNode{yyS[yypt-2].contentGroupNode, yyS[yypt-0].contentGroupNode})
		}
	case 85:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode(yyS[yypt-0].str, ast.OPNone, []*ast.ContentGroupNode{})
		}
	case 86:
		{
			yyVAL.contentGroupNode = yyS[yypt-1].contentGroupNode
		}
	case 87:
		{
			yyVAL.contentGroupNode = ast.NewContentGroupNode("", ast.OPNOT, []*ast.ContentGroupNode{yyS[yypt-0].contentGroupNode})
		}
	case 88:
		{
			yyVAL.str = yyS[yypt-1].str
		}
	case 89:
		{
			yyVAL.str = yyS[yypt-1].str
		}
	case 90:
		{
			yyVAL.str = yyS[yypt-1].str
		}
	case 91:
		{
			yyVAL.str = yyS[yypt-1].str
		}
	case 92:
		{
			yyVAL.str = yyS[yypt-1].str
		}
	case 93:
		{
			yyVAL.str = yyS[yypt-1].str
		}
	case 94:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 95:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 96:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 97:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 98:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 99:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 100:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 101:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 102:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 103:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 104:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 105:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 106:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 107:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 108:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 109:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 110:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 111:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 112:
		{
			yyVAL.str = yyS[yypt-1].str + " " + fmt.Sprint(yyS[yypt-0].str)
		}
	case 113:
		{
			yyVAL.str = ""
		}
	case 114:
		{
			yyVAL.str = yyS[yypt-1].str + " " + yyS[yypt-0].str
		}
	case 115:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode()
		}
	case 116:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode
			yyVAL.assignGroupNode.AssignTag(yyS[yypt-1].str)
		}
	case 117:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode
			yyVAL.assignGroupNode.UnassignTag(yyS[yypt-1].str)
		}
	case 118:
		{
			yyVAL.assignGroupNode = ast.NewAssignGroupNode()
		}
	case 119:
		{
			yyVAL.assignGroupNode = yyS[yypt-0].assignGroupNode
			yyVAL.assignGroupNode.AssignTag(yyS[yypt-1].str)
		}
	case 120:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 121:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 124:
		{ /*if debug {fmt.Println("time_single")}*/
		}
	case 125:
		{ /*if debug {fmt.Println("time_single")}*/
		}
	case 126:
		{ /*if debug {fmt.Println("time_range")}*/
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
